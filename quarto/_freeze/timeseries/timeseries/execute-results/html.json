{
  "hash": "5ddc613f99589e17ea8979c810954a38",
  "result": {
    "markdown": "---\ntitle: \"Time Series\"\nauthor: \"Michael Liou\"\ndate: \"2022-12-19\"\nexecute:\n  cache: true\n---\n\n\n\n\n# Introduction\n\n## Types of Models\n\n- Autoregression (AR)\n- Moving Average (AM)\n- Vector Autoregression (VAR)\n\n- HMM\n  - related to bayesian inference, special\n- State Space Models\n  - very broad space of models that includes arima models, and dynamic linear models. Can also account for linear/nonlinear gaussian/non-gaussian errors\n- Multivariate autoregression (MAR)\n\n## Software\n\n- `stats`\n  - `KalmanLike`, `KalmanRun`, `KalmanSmooth`, `KalmanForecast`\n- `dlm`\n- `KFAS`\n\nSee also [State Space Models in R](https://www.google.com/url?sa=t&rct=j&q=&esrc=s&source=web&cd=&ved=2ahUKEwjng_vXx4P6AhWdk4kEHZ4KBUAQFnoECBoQAQ&url=https%3A%2F%2Fwww.jstatsoft.org%2Farticle%2Fdownload%2Fv041i04%2F488&usg=AOvVaw0bbJoxE4fWu74zhZs0qggz).\n\n## Theory\n\nCourses \n\n- Kevin Kotz√©'s [Time Series Analysis Course](https://www.economodel.com/time-series-analysis)\n  - has a great overview and description, and packaged R commands for univariate and multivariate from an economics perspective.\n\n# Univariate time series\n\n## base tools\n\n\n::: {.cell hash='timeseries_cache/html/unnamed-chunk-1_dbfc259e5d324f6ec4699982f2b9f4a6'}\n\n```{.r .cell-code}\n# acf, ccf, pacf\n```\n:::\n\n\n## AR(1)\n\nAutoregressive of order 1 is the simplest time series you can have.\n\n$$\n\\begin{aligned}\nY_t = Y_{t-1} + \\varepsilon_t\n\\end{aligned}\n$$\n\n## Simulated Examples\n\n\n::: {.cell hash='timeseries_cache/html/unnamed-chunk-2_35f5076db960a0e0b6a6038afba65b40'}\n\n```{.r .cell-code}\n# AR models\nsim_ar <- tibble(p = 1:3,\n                 ar = list(.7,\n                           c(.7,-.3),\n                           c(.7, -.3, .5)),\n                 n = 200) %>% \n  rowwise() %>% \n  mutate(y = list(arima.sim(list(ar = ar), n = 200)),\n         x = list(time(y)))\n\nsim_ar %>% unnest(c(x, y)) %>% \n  ggplot(aes(x = x, y = y)) +\n  geom_line() +\n  facet_grid(p~.)\n```\n\n::: {.cell-output-display}\n![](timeseries_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n::: {.cell hash='timeseries_cache/html/unnamed-chunk-3_6ec807d6aa675f06c264c3be5946c6fa'}\n\n```{.r .cell-code}\n# ma processes\nsim_ma <- tibble(q = 1:3,\n                 ma = list(.7,\n                           c(.7,-.3),\n                           c(.7, -.3, .5)),\n                 n = 200) %>% \n  rowwise() %>% \n  mutate(y = list(arima.sim(list(ma = ma), n = 200)),\n         x = list(time(y))) %>% \n  ungroup()\n\nsim_ma %>% unnest(c(x, y)) %>% \n  ggplot(aes(x = x, y = y)) +\n  geom_line() +\n  facet_grid(q~.)\n```\n\n::: {.cell-output-display}\n![](timeseries_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\n## Examples: LA County\n\nWe just examine the cardiovascular mortality from the LA Pollution study. These are average weekly cv mortality rates from `astsa` package.\n\n\n::: {.cell hash='timeseries_cache/html/unnamed-chunk-4_60aa7407ae430e0fa22e649179614d41'}\n\n```{.r .cell-code}\n# ?cmort\nx <- cmort %>% as.numeric()\nx1 <- x %>% lag()\n# yt = u + beta * yt-1\ncmort_lm <- lm(x~x1)\n\ncbind(coef(cmort_lm)[1] + coef(cmort_lm)[2] * x1,\n      c(NA, fitted(cmort_lm)),\n      c(NA, predict(cmort_lm))) %>% \n  head() # fitted/predicted values match up\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n       [,1]      [,2]      [,3]\n         NA        NA        NA\n2  95.73811  95.73811  95.73811\n3 100.97814 100.97814 100.97814\n4  93.04478  93.04478  93.04478\n5  95.89246  95.89246  95.89246\n6  94.19466  94.19466  94.19466\n```\n:::\n:::\n\n::: {.cell hash='timeseries_cache/html/unnamed-chunk-5_20b8fba2949ad72f901196db037386fe'}\n\n```{.r .cell-code}\nqplot(time(cmort), x, geom = \"line\", color = \"black\") +\n  geom_line(aes(y =  c(NA, fitted(cmort_lm)), color = \"red\")) +\n  scale_color_manual(values = c(\"black\", \"red\"),\n                     label = c(\"raw\", \"fitted\"))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nDon't know how to automatically pick scale for object of type ts. Defaulting to continuous.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 1 row(s) containing missing values (geom_path).\n```\n:::\n\n::: {.cell-output-display}\n![](timeseries_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n\n\n## Example: AirPassengers\n\n\n::: {.cell hash='timeseries_cache/html/unnamed-chunk-6_fa9d0be5d8cbfabb5394f988697c92aa'}\n\n```{.r .cell-code}\nAirPassengers %>% plot()\n```\n\n::: {.cell-output-display}\n![](timeseries_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n::: {.cell hash='timeseries_cache/html/unnamed-chunk-7_333b55c7f1fe57e48861478c4b4ee5d0'}\n\n```{.r .cell-code}\nsarima(AirPassengers, d = 1, p = 2, q = 0)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ninitial  value 3.522169 \niter   2 value 3.456359\niter   3 value 3.447683\niter   4 value 3.447001\niter   5 value 3.447000\niter   6 value 3.447000\niter   6 value 3.447000\niter   6 value 3.447000\nfinal  value 3.447000 \nconverged\ninitial  value 3.441124 \niter   2 value 3.441115\niter   3 value 3.441115\niter   4 value 3.441114\niter   4 value 3.441114\niter   4 value 3.441114\nfinal  value 3.441114 \nconverged\n```\n:::\n\n::: {.cell-output-display}\n![](timeseries_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n$fit\n\nCall:\narima(x = xdata, order = c(p, d, q), seasonal = list(order = c(P, D, Q), period = S), \n    xreg = constant, transform.pars = trans, fixed = fixed, optim.control = list(trace = trc, \n        REPORT = 1, reltol = tol))\n\nCoefficients:\n         ar1      ar2  constant\n      0.3792  -0.2314    2.4075\ns.e.  0.0823   0.0834    3.0636\n\nsigma^2 estimated as 973.4:  log likelihood = -694.99,  aic = 1397.98\n\n$degrees_of_freedom\n[1] 140\n\n$ttable\n         Estimate     SE t.value p.value\nar1        0.3792 0.0823  4.6065  0.0000\nar2       -0.2314 0.0834 -2.7767  0.0062\nconstant   2.4075 3.0636  0.7858  0.4333\n\n$AIC\n[1] 9.77605\n\n$AICc\n[1] 9.777257\n\n$BIC\n[1] 9.858927\n```\n:::\n:::\n\n\n\n# Multivariate time series\n\n## Vector Autoregression\n\n### Example: LA County (VAR)\n\n\n\n::: {.cell hash='timeseries_cache/html/unnamed-chunk-8_b2fd1c75659751b404f70bed58ed2dcd'}\n\n```{.r .cell-code}\n# cardiovascular mortality, temperature and particulates in LA county, weekly.\nla <- cbind(cmort, tempr, part)\n\n# visualization\n# ts.plot(cmort, tempr, part, col = 1:3) # base r of autoplot \nautoplot(la, color = \"black\") + facet_grid(series~., scales = \"free_y\")\n```\n\n::: {.cell-output-display}\n![](timeseries_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n::: {.cell hash='timeseries_cache/html/unnamed-chunk-9_481c08d18e1749828a0f5dc808543794'}\n\n```{.r .cell-code}\nla_var1 <- VAR(la, p = 1, type = \"both\") # w/ trend\nla_var2 <- VAR(la, p = 2, type = \"both\") # w/ trend\n\n# coefficient matrix\nsapply(coef(la_var1),rlang::as_function(~.x[,\"Estimate\"]))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n               cmort        tempr         part\ncmort.l1  0.46482370 -0.244046444 -0.124774858\ntempr.l1 -0.36088790  0.486595619 -0.476526201\npart.l1   0.09941503 -0.127660994  0.581308364\nconst    73.22729188 67.585597743 67.463501275\ntrend    -0.01445884 -0.006912455 -0.004650001\n```\n:::\n\n```{.r .cell-code}\n# vcov of coef estimates\nsapply(coef(la_var1), rlang::as_function(~round(.x[,\"Std. Error\"], 3)))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n         cmort tempr   part\ncmort.l1 0.037 0.042  0.079\ntempr.l1 0.032 0.037  0.069\npart.l1  0.019 0.022  0.041\nconst    4.834 5.542 10.399\ntrend    0.002 0.002  0.004\n```\n:::\n\n```{.r .cell-code}\n# estimated covariance of errors\nsummary(la_var1)$covres\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n          cmort     tempr      part\ncmort 31.171944  5.974621  16.65448\ntempr  5.974621 40.964945  42.32335\npart  16.654476 42.323345 144.26025\n```\n:::\n:::\n\n::: {.cell hash='timeseries_cache/html/unnamed-chunk-10_bd6e7998078620d598bad9424069c1ff'}\n\n```{.r .cell-code}\nla_var1_const <- VAR(la, p = 1, type = \"const\")\n\nsapply(coef(la_var1_const),rlang::as_function(~.x[,\"Estimate\"]))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n               cmort      tempr        part\ncmort.l1  0.60149346 -0.1787076 -0.08082151\ntempr.l1 -0.30946101  0.5111817 -0.45998718\npart.l1   0.07096225 -0.1412636  0.57215788\nconst    54.94579126 58.8456142 61.58412402\n```\n:::\n:::\n\n::: {.cell hash='timeseries_cache/html/unnamed-chunk-11_27fbe107d223ec8d5ae2b6e1a70bde23'}\n\n```{.r .cell-code}\n# \nla_ols <- ar.ols(la, order.max = 1, demean = FALSE, intercept = TRUE)\n\n# matches constant VAR coefficients\nrbind(t(la_ols$ar[1,,]),\n      const = la_ols$x.intercept)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n            cmort      tempr        part\ncmort  0.60149346 -0.1787076 -0.08082151\ntempr -0.30946101  0.5111817 -0.45998718\npart   0.07096225 -0.1412636  0.57215788\nconst 54.94579126 58.8456142 61.58412402\n```\n:::\n:::\n\n::: {.cell hash='timeseries_cache/html/unnamed-chunk-12_5c391e9f07385452a3271aaa9c3aa6dd'}\n\n```{.r .cell-code}\nla %>% melt(c(\"time\", \"series\")) %>% \n  ggplot(aes(time, value)) + \n  geom_line(color = \"black\") + \n  geom_line(data = fitted(la_var1) %>% melt(c(\"time\", \"series\")),\n            mapping = aes(time, value, color = \"red\"), alpha= .6) +  # var1\n  geom_line(data = fitted(la_var1_const) %>% melt(c(\"time\", \"series\")),\n            mapping = aes(time, value, color = \"blue\"), alpha = .6) + # var1 const\n  geom_line(data = fitted(la_var2) %>% melt(c(\"time\", \"series\")),\n            mapping = aes(time, value, color = \"green\"), alpha = .6) + # var2\n  scale_color_manual(values = c(\"red\", \"blue\", \"green\"),\n                     labels = c(\"var1\", \"var1_const\", \"var2\")) + \n  facet_grid(series~.)\n```\n\n::: {.cell-output-display}\n![](timeseries_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\nFrom looking at the models, they're quite difficult to tell which model is fitting better than the others.\n\n\n\n\n::: {.cell hash='timeseries_cache/html/unnamed-chunk-13_069309c731419964ef28a2714a5c0c7c'}\n\n```{.r .cell-code}\n# var estimates using lm\n# Matrix of time series\nla_mat <- la %>% `class<-`(\"matrix\")\n\nla_var1_manual <- lm(la_mat ~ cbind(lag(la_mat), 1:nrow(la_mat))) # w/ trend\nla_var1_const_manual <- lm(la_mat ~ lag(la_mat)) # const\n```\n:::\n\n::: {.cell hash='timeseries_cache/html/unnamed-chunk-14_d26a2bbfbdf574e30b994e25bfb309bb'}\n\n```{.r .cell-code}\n# coefs match\nsapply(coef(la_var1),rlang::as_function(~.x[,\"Estimate\"]))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n               cmort        tempr         part\ncmort.l1  0.46482370 -0.244046444 -0.124774858\ntempr.l1 -0.36088790  0.486595619 -0.476526201\npart.l1   0.09941503 -0.127660994  0.581308364\nconst    73.22729188 67.585597743 67.463501275\ntrend    -0.01445884 -0.006912455 -0.004650001\n```\n:::\n\n```{.r .cell-code}\ncoef(la_var1_manual)[c(2:4, 1, 5),] %>% # reorder to match\n  `rownames<-`(c(\"cmort\", \"tempr\", \"part\", \"const\", \"trend\")) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n            cmort        tempr         part\ncmort  0.46482370 -0.244046444 -0.124774858\ntempr -0.36088790  0.486595619 -0.476526201\npart   0.09941503 -0.127660994  0.581308364\nconst 73.22729188 67.585597743 67.463501275\ntrend -0.01445884 -0.006912455 -0.004650001\n```\n:::\n\n```{.r .cell-code}\n# var matches\n# SSE / n-r-p\n# nobs - coefs_estimated - VAR_order\ncrossprod(la_var1_const_manual$residuals) / (nrow(la_mat) - la_var1_const_manual$rank - 1) # 503\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n          cmort     tempr      part\ncmort 34.420060  7.545224  17.68590\ntempr  7.545224 41.640053  42.74813\npart  17.685898 42.748133 144.31580\n```\n:::\n\n```{.r .cell-code}\nsummary(la_var1_const)$covres\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n          cmort     tempr      part\ncmort 34.420060  7.545224  17.68590\ntempr  7.545224 41.640053  42.74813\npart  17.685898 42.748133 144.31580\n```\n:::\n:::\n\n::: {.cell hash='timeseries_cache/html/unnamed-chunk-15_6ca6b0500a5566f4a8122a7cc62fefd1'}\n\n```{.r .cell-code}\n# order selection\nVARselect(la) # selects 2 by BIC\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$selection\nAIC(n)  HQ(n)  SC(n) FPE(n) \n     9      5      2      9 \n\n$criteria\n                  1           2           3           4           5           6\nAIC(n)     11.84541    11.35895    11.32363    11.28376    11.23095    11.20946\nHQ(n)      11.88523    11.42864    11.42318    11.41318    11.39023    11.39861\nSC(n)      11.94687    11.53651    11.57728    11.61351    11.63679    11.69140\nFPE(n) 139442.85952 85730.12941 82755.88760 79522.85813 75434.43083 73833.93231\n                 7           8           9          10\nAIC(n)    11.21508    11.19717    11.17261    11.17843\nHQ(n)     11.43409    11.44604    11.45134    11.48703\nSC(n)     11.77311    11.83130    11.88283    11.96475\nFPE(n) 74254.62493 72942.17171 71179.59211 71604.50745\n```\n:::\n:::\n\n::: {.cell hash='timeseries_cache/html/unnamed-chunk-16_a89a9f6ded6c9fd956324c5a9e0e7fea'}\n\n```{.r .cell-code}\nacf(resid(la_var2), 52)$acf\n```\n\n::: {.cell-output-display}\n![](timeseries_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n, , 1\n\n               [,1]         [,2]         [,3]\n [1,]  1.0000000000  0.217879438  0.277509279\n [2,]  0.0190479748  0.005389606  0.005820489\n [3,]  0.0196665705  0.029266506  0.057572004\n [4,]  0.0018750976  0.113509001  0.072168281\n [5,]  0.0370667228  0.089215447  0.089481560\n [6,]  0.0234497703  0.006534372  0.041550540\n [7,]  0.0002439599 -0.020245959  0.015288896\n [8,] -0.0201621665 -0.014605120  0.028696187\n [9,] -0.0717493834 -0.047291658 -0.055464437\n[10,]  0.0488793637 -0.008198369  0.021221599\n[11,] -0.0695031498 -0.080878807 -0.004731138\n[12,] -0.0070995080 -0.074345678 -0.011980420\n[13,]  0.0282316571 -0.014114181 -0.014007958\n[14,] -0.0198756141 -0.034144315  0.051026255\n[15,] -0.0443005551 -0.038874943 -0.081377952\n[16,]  0.0786827878 -0.059140216 -0.031402333\n[17,] -0.0327084309 -0.041759473 -0.016714248\n[18,]  0.0108442536  0.022255941  0.040101939\n[19,]  0.0043285647 -0.062265045 -0.027016343\n[20,] -0.0554667399  0.022056093  0.037211470\n[21,]  0.0079066206 -0.018238253 -0.007438298\n[22,]  0.0314774049 -0.040331764 -0.149078216\n[23,]  0.0096106673 -0.082998640 -0.047516759\n[24,] -0.0025419428  0.003317043  0.017429386\n[25,]  0.0539863170  0.032757468 -0.003150329\n[26,] -0.0005172218  0.041461399 -0.004494827\n[27,]  0.0127625494 -0.014332058 -0.028122241\n[28,]  0.0904734843  0.040357750 -0.047025945\n[29,] -0.0746643793  0.015222129 -0.044827848\n[30,] -0.0008245447 -0.038980932 -0.034558792\n[31,] -0.0520697165  0.073548481 -0.017026157\n[32,]  0.0304587464 -0.022986878 -0.024226714\n[33,] -0.0141854337 -0.064576026 -0.056280760\n[34,] -0.0070769444  0.077901477 -0.040394100\n[35,] -0.0362246932 -0.014366382 -0.060734195\n[36,] -0.0214401093 -0.014338261 -0.030299110\n[37,] -0.0008471980 -0.068583531 -0.017670940\n[38,] -0.0006026269 -0.019236217 -0.043214529\n[39,]  0.0064111064  0.002799474  0.039626533\n[40,] -0.0043898669  0.034082897 -0.012423884\n[41,] -0.0583439171 -0.002440935  0.034561440\n[42,]  0.0136243581 -0.033637019  0.027505399\n[43,] -0.0033203555 -0.024584074 -0.024374319\n[44,] -0.0537574770 -0.059025968 -0.021135711\n[45,]  0.0030748770  0.027478454  0.056947794\n[46,] -0.0152810216 -0.032749931 -0.025585528\n[47,] -0.0075957603 -0.039362742  0.053481937\n[48,]  0.0532566114 -0.004024262  0.070240327\n[49,]  0.0235818271  0.003943218 -0.018320176\n[50,] -0.0474990754  0.062016271  0.047488310\n[51,] -0.0334291892  0.032924414  0.045649735\n[52,]  0.0451385770  0.108830728  0.103113081\n[53,]  0.0016785953 -0.030510828 -0.015254719\n\n, , 2\n\n               [,1]          [,2]          [,3]\n [1,]  0.2178794381  1.0000000000  5.998217e-01\n [2,] -0.0069134627 -0.0273153464 -2.028058e-02\n [3,] -0.0417396384 -0.0732641900 -5.746080e-02\n [4,] -0.0365251777 -0.0191031871 -5.234533e-03\n [5,]  0.1223110978  0.0997388030 -3.702000e-02\n [6,] -0.0426267519  0.0013077690  7.279985e-02\n [7,]  0.0008907663  0.0168402620  8.611434e-02\n [8,]  0.0527425268 -0.0236969942 -1.401886e-02\n [9,]  0.0329738376  0.0578341857  4.853311e-02\n[10,]  0.0008613065  0.0881269759  6.528484e-02\n[11,]  0.0038643703 -0.0193190571  5.039434e-02\n[12,] -0.0322386983 -0.0849282312 -3.180028e-02\n[13,] -0.0337960274 -0.1018435407 -4.181919e-02\n[14,]  0.0383478236 -0.0263751966  6.256511e-02\n[15,]  0.0530821002 -0.0604857546 -4.390368e-03\n[16,] -0.0578959149 -0.0405959048  2.986441e-02\n[17,] -0.1207562981 -0.0172022414  4.496452e-02\n[18,]  0.0309632879  0.0176564288 -1.277802e-05\n[19,]  0.0458044264 -0.0082539630 -2.952468e-03\n[20,]  0.0181248335 -0.0458729285  2.196671e-02\n[21,]  0.0341990752 -0.0128123086  5.801552e-02\n[22,] -0.0318799968  0.0017036440 -4.847752e-02\n[23,]  0.0015451698 -0.0791214645 -7.364551e-02\n[24,]  0.1330538448  0.0298501082  6.925756e-02\n[25,]  0.0009457457  0.0770053571  2.507865e-02\n[26,]  0.0109719963  0.0405010344 -1.796386e-02\n[27,]  0.0031538570  0.0078040045 -3.669959e-02\n[28,]  0.1218428831  0.0390931973  1.646810e-02\n[29,]  0.0119989667 -0.0337334222 -7.647781e-02\n[30,]  0.0193617959  0.0084917093 -5.090994e-02\n[31,] -0.0902243555  0.0195814082 -1.051971e-02\n[32,]  0.0073009931 -0.0535270412 -7.326326e-02\n[33,]  0.0096090917 -0.0350304718 -4.321136e-02\n[34,] -0.0481614893  0.0380136660 -2.507569e-02\n[35,] -0.0305350325  0.0607175363  1.222326e-02\n[36,] -0.0572740455 -0.1200585756 -7.296693e-02\n[37,] -0.0847362741 -0.1160121279 -7.261332e-02\n[38,] -0.0768652106  0.0017602589 -8.082381e-02\n[39,]  0.0523430919  0.0006355169  1.791517e-02\n[40,] -0.0442097337 -0.0676960291 -3.356747e-02\n[41,]  0.0032764001 -0.0343545757  5.942883e-03\n[42,] -0.0015313453 -0.0959785808 -8.464231e-02\n[43,] -0.0724475785  0.0561233233  2.837262e-02\n[44,] -0.0374797220  0.0378247513  4.592497e-02\n[45,]  0.0672385341 -0.0004920405 -6.144555e-03\n[46,] -0.0198744796 -0.0468162051 -1.651516e-02\n[47,] -0.0003644189  0.0043254720 -2.643725e-03\n[48,]  0.0696476317  0.1028146531  6.472267e-02\n[49,] -0.0011331338  0.0738081817  5.243119e-03\n[50,]  0.1348519820  0.0142999698  5.172204e-02\n[51,]  0.0356162974  0.0924132277  9.607002e-02\n[52,]  0.0219433194  0.0778897000  5.430037e-02\n[53,] -0.0167431902  0.0649301370 -1.286292e-02\n\n, , 3\n\n              [,1]          [,2]          [,3]\n [1,]  0.277509279  5.998217e-01  1.0000000000\n [2,] -0.005606983 -6.272803e-03 -0.0718869340\n [3,] -0.050471197 -2.927774e-02 -0.1044093310\n [4,] -0.051476471  2.435578e-02  0.0818592172\n [5,]  0.108826391  1.151831e-01  0.1014317196\n [6,] -0.022393526 -6.285620e-02  0.0399776248\n [7,] -0.011671622 -8.293098e-03  0.0868554043\n [8,]  0.107868824 -2.285020e-02  0.0788537879\n [9,]  0.026654486  5.549410e-02  0.0286138179\n[10,]  0.006512363  5.259021e-02  0.0134036524\n[11,]  0.017700351  5.772317e-02  0.1179402578\n[12,]  0.034172710 -7.100005e-02 -0.0005368955\n[13,]  0.008708124 -7.024868e-02 -0.0402356322\n[14,]  0.026161657 -1.668984e-02  0.0198641366\n[15,]  0.008635961 -3.657212e-02 -0.0296797994\n[16,] -0.045548433 -2.637129e-02 -0.0014683183\n[17,] -0.061769793 -1.222882e-01 -0.0526359004\n[18,] -0.012604978  4.833238e-05 -0.0665361808\n[19,]  0.058612968 -3.741204e-02 -0.0279237208\n[20,] -0.014398202 -4.194695e-02 -0.0219147857\n[21,] -0.077601777 -5.893514e-02 -0.0523712541\n[22,] -0.070870854 -2.192678e-02 -0.1158347237\n[23,]  0.017674360 -8.745858e-02 -0.0902506776\n[24,]  0.018570603 -4.593930e-02 -0.0473447030\n[25,] -0.030733137 -2.834240e-02 -0.0974021202\n[26,] -0.079026054  1.409404e-03 -0.0893268387\n[27,] -0.011309736 -4.065380e-02 -0.0655419435\n[28,]  0.061413962  3.922000e-02 -0.0118739795\n[29,] -0.004480642 -1.555248e-02 -0.1293403808\n[30,] -0.046126569 -4.969208e-02 -0.1167476498\n[31,] -0.074081955  6.289827e-04 -0.0410670937\n[32,]  0.039199340  3.136864e-02 -0.0436366189\n[33,] -0.029864342 -3.633935e-03 -0.0893552371\n[34,] -0.062001622  1.449538e-02 -0.0535228109\n[35,]  0.014113252  6.231999e-02 -0.0164022658\n[36,]  0.018152519 -3.877261e-03 -0.0598618895\n[37,] -0.073200277 -7.932530e-02 -0.0767545504\n[38,] -0.029641931  7.458741e-02  0.0355013579\n[39,]  0.049829939  3.407308e-02  0.0065261069\n[40,] -0.020708624 -4.724998e-02 -0.0758863362\n[41,] -0.020351186  3.246480e-02  0.0624133451\n[42,]  0.020070135 -9.845861e-03 -0.0263576348\n[43,]  0.004443117  4.202227e-02  0.0249697264\n[44,] -0.023152376  2.120964e-02  0.0813184577\n[45,]  0.009773793 -9.803032e-03  0.0384603537\n[46,]  0.009824226  3.559850e-02  0.0455509389\n[47,]  0.009718289  5.872142e-02  0.0414817491\n[48,]  0.029567261  5.085948e-02  0.0930198800\n[49,]  0.010326438 -2.081853e-03  0.0687912111\n[50,]  0.112706488  4.545080e-02  0.0631379931\n[51,]  0.073618289  9.333858e-02  0.1271988308\n[52,]  0.019653903  3.141887e-02  0.1165514742\n[53,]  0.041510649  5.583284e-02  0.0648846998\n```\n:::\n:::\n\n\nThe CCF plots should all be non significant. The second part of \"x & y\" are the ones that lead.\n\n\n::: {.cell hash='timeseries_cache/html/unnamed-chunk-17_2165f4caa06715e6a43b73601c871bd4'}\n\n```{.r .cell-code}\n# serial test\nserial.test(la_var2, lags.pt = 12, type = \"PT.adjusted\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n\tPortmanteau Test (adjusted)\n\ndata:  Residuals of VAR object la_var2\nChi-squared = 162.35, df = 90, p-value = 4.602e-06\n```\n:::\n\n```{.r .cell-code}\nla[,1]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTime Series:\nStart = c(1970, 1) \nEnd = c(1979, 40) \nFrequency = 52 \n  [1]  97.85 104.64  94.36  98.05  95.85  95.98  88.63  90.85  92.06  88.75\n [11]  94.60  92.86  98.02  87.64  97.40  83.24  86.60  90.69  82.86  99.06\n [21]  81.00  93.18  86.86  89.35  87.13  88.39  85.38  83.96  84.95  86.81\n [31]  85.25  94.72  90.96  87.73  92.58  87.02  92.68  97.95  94.19  93.95\n [41]  92.29  93.48  97.41  96.98 106.60 112.41 118.59 107.90 111.82 102.78\n [51] 100.63 106.54 105.39 104.99 102.72 104.67 103.30  98.46 100.78  94.43\n [61]  92.16  92.13  95.04  86.88  95.29  85.39  92.63  88.72  87.09  83.92\n [71]  89.01  78.14  92.84  88.65  86.66  82.04 105.15  94.19  83.99  88.22\n [81]  85.59  99.21  87.77  90.39  82.25 102.92  86.84  97.22  94.97 104.86\n [91]  80.53 102.47  97.80  95.28 105.64 106.44 110.65 114.41 115.98 112.72\n[101] 115.99 104.14 109.30 111.47 102.67 101.34  94.97  90.48  93.70  81.87\n[111]  91.12  90.55  89.62  91.63  89.22  84.81  95.00  83.77  98.26  82.87\n[121]  85.51  84.67  84.45  93.96  82.47  89.18  87.33  92.67  93.83  86.65\n[131]  89.35  77.97  86.06  83.34  87.35  90.58  84.72  88.32  82.62  92.52\n[141]  86.73  99.54  95.50  92.34  97.49  97.90  97.54 103.78 110.17 116.04\n[151] 132.04 126.95 121.11 119.30 118.20 102.36  98.44  97.87  92.98  96.16\n[161]  86.83  91.09  92.50  90.64  80.69  99.91  89.09  94.25  93.33  84.08\n[171]  86.37  86.61  82.47  82.73  98.29  87.02  91.13  80.23  81.36  82.80\n[181]  87.24  79.37  86.83  82.00  77.96  79.69  87.32  85.33  92.02  84.03\n[191]  83.45  82.35  89.17  82.24  93.35  89.16  95.13  89.10 100.32  95.61\n[201]  99.61 105.82 104.20  95.45  90.48  93.58  91.71  95.29  94.69 102.50\n[211]  98.58 107.12  99.29  96.85  89.02  96.27  97.55  85.16  94.77  85.45\n[221]  97.46  83.31  91.41  88.84  86.44  82.08  83.63  95.22  80.28  85.59\n[231]  84.68  81.53  89.20  74.51  81.85  81.97  85.01  86.98  81.67  91.11\n[241]  83.38  86.18  89.93  91.82  92.27  89.29  85.41  96.78  83.60  98.63\n[251]  90.86  94.36  97.52 108.68 107.23 107.08 113.39 105.51 111.90 110.44\n[261]  95.42  97.78  90.38  86.89  91.59  85.51  88.16  87.03  88.61  96.96\n[271]  80.03  80.53  76.46  78.85  87.03  82.27  78.92  72.75  77.75  83.79\n[281]  82.13  76.42  74.58  79.61  76.52  79.27  74.70  75.49  82.82  80.29\n[291]  80.05  78.64  79.40  71.02  73.55  79.60  85.08  90.14  82.26  86.75\n[301]  90.11  94.86  89.68  90.16  85.73  96.82 100.37  93.43  94.12  89.26\n[311]  91.81  97.40 102.71 101.94  97.40  96.12 105.45  94.34  92.51  88.47\n[321]  85.47  85.70  84.48  85.63  79.67  80.78  74.58  76.32  80.37  83.30\n[331]  82.98  91.34  78.57  76.68  76.47  73.66  78.61  83.40  71.96  77.17\n[341]  72.38  79.52  72.05  75.86  74.32  77.70  82.99  77.79  77.42  85.55\n[351]  85.33  82.16  83.74  84.40  90.32  82.74  91.50  96.23  92.90  92.30\n[361]  91.76  92.34  78.91  88.06  81.91  79.68  83.20  84.05  85.80  84.39\n[371]  91.74  90.65  89.67  86.24  91.46  83.30  83.05  74.14  90.12  83.84\n[381]  79.94  74.65  77.89  78.06  74.96  77.90  73.65  79.32  82.91  79.48\n[391]  73.21  76.46  73.76  68.11  76.53  68.46  72.84  79.92  73.26  79.55\n[401]  77.02  78.39  81.86  88.20  75.69  88.85  82.52  87.44  82.91  92.84\n[411]  91.85  89.82  96.84  99.56 105.10  95.70  93.46  99.27  90.39  85.85\n[421]  86.69  92.94  86.63  89.78  83.22  86.04  81.53  77.46  76.63  82.09\n[431]  81.22  70.96  80.17  78.48  76.80  77.63  74.31  76.30  85.97  73.07\n[441]  76.29  75.21  79.18  78.25  77.24  81.55  75.46  76.86  88.43  92.93\n[451]  77.65  78.74  73.63  82.11  80.81  84.34  83.48  76.40  92.77  88.09\n[461]  96.20 100.28 107.58  93.73  87.33  88.11  88.07 100.81  95.52  91.14\n[471]  85.67  88.24  88.61  85.64  87.29  83.92  89.15  87.61  81.99  84.86\n[481]  81.17  87.33  86.40  85.90  79.01  83.49  87.88  74.94  80.32  81.75\n[491]  78.68  74.62  74.16  71.50  75.89  74.89  77.36  73.63  81.17  83.91\n[501]  82.36  79.74  73.46  79.03  76.56  78.52  89.43  85.49\n```\n:::\n:::\n\n\nThere are some large sample properties of VAR's as well,\n\n\n::: {.cell hash='timeseries_cache/html/unnamed-chunk-18_2f31dbfec62ef56932a685f46ce1228b'}\n\n```{.r .cell-code}\nlibrary(marima)\n```\n:::\n\n\n\n# State Space Model\n\nThese models have a hierarchical form, in which there is some underlying time series process, but then we also observe data on top of that. Thus, the general form of the equations look like this:\n\n$$\n\\begin{aligned}\n\\textbf{State Equation:}& \\\\\nx_t &= \\Phi x_{t-1} + \\Upsilon u_t +   w_t \\\\\n\\textbf{Observation Equation:}& \\\\\ny_t &= A_t x_t + \\Gamma u_t  + v_t\n\\end{aligned}\n$$\nwhere:\n\n- $\\Upsilon u_t$ - is time varying exogenous variables\n- $\\Upsilon u_t$ - is time varying exogenous variables\n- $x_t$ is state at time $t$\n- $\\Phi x_t$ is state at time $t$ describes how $x$ evolves\n- $w_t$ is state noise with $w_t \\sim N(0, Q)$\n- $v_t$ is measurement noise with $v_t \\sim N(0, R)$\n\nThere are more general forms of the state space model: with correlated errors, see Durbin Koopman for more state space methods.\n\nIt seems now that state space models are now also being superseded by recurrent neural networks, which can model dynamical properties.\n\n## Example: AR(1) with observational noise\n\nThe state equation:\n\n$$\n\\begin{aligned}\n\\textbf{State Equation:}& \\\\\nx_t &= \\phi x_{t-1} + w_t \\\\\n\\textbf{Observation Equation:}& \\\\\ny_t &= x_t + v_t\n\\end{aligned}\n$$\n\nWhat is interesting about this case with a hierarchical data structure, is that we can show it has the same error structure as an ARMA model. Shumway Stoffer notes that even though it has the same parameterization as an ARMA model, it is often easier to think about the state model form. See example 6.3 for more details.\n\n## Kalman Filter\n\nKalman filter is a recursive, markovian updating algorithm for estimating a hidden state variable given noisy and partial observations. The common example is that we are tracking a truck by gps observations. Since the gps observations are imprecise, they will jump back and forth.\n\nAn excellent resource explanation with pictures is found [from bzarg](https://www.bzarg.com/p/how-a-kalman-filter-works-in-pictures/)\n\n### Example: Local level Model\n\nConsider the equations:\n\n$$\n\\begin{aligned}\n\\textbf{State Equation:}& \\\\\nx_t &= x_{t-1} + w_t \\\\\n\\textbf{Observation Equation:}& \\\\\ny_t &= x_t + v_t\n\\end{aligned}\n$$\nwhere both $w_t, v_t \\sim N(0, 1)$. We can make the Kalman filter here based on our observation equation. We assume that $A = 1$ (in this case) and $Phi = 1$ are known here. In reality, we can use maximum likelihood of the _innnovations_ (prediction errors) in order to estimate the \n\n\n::: {.cell hash='timeseries_cache/html/unnamed-chunk-19_a65565b1fe0ae512c4f123a773a8ee9c'}\n\n```{.r .cell-code}\n# generate the data\nset.seed(1)\nn <-  50\nx0 <- rnorm(1) # random initial state\nw <- rnorm(n, 0, 1) # state level noise\nv = rnorm(n, 0, 1) # observation level noise\nx <- cumsum(c(x0, w)) # true state variables\ny <- x[-1] + v # remove initial state\nks <- Ksmooth0(num = 50, \n               y = y, \n               A = 1, \n               mu0 = 10, # set initial values\n               Sigma0 = 20, # set initial values\n               Phi = 1,\n               cQ = 1,\n               cR = 1)\n```\n:::\n\n::: {.cell hash='timeseries_cache/html/unnamed-chunk-20_05815c3be33fe5a897cfe78ecaec54a5'}\n\n```{.r .cell-code}\n# plot all the predictions\npar(mfrow = c(3, 1),\n    mar = c(2, 4, 2, 4))\n# predictions\nplot(x[-1], main = \"Prediction\", ylim = c(-5, 10))\nlines(ks$xp[1,,])\nlines(ks$xp + 2*sqrt(ks$Pp[1,,]), lty = 2, col = 4)\nlines(ks$xp - 2*sqrt(ks$Pp[1,,]), lty = 2, col = 4) # variance matrices\n\n# filters\nplot(x[-1], main = \"Filters\", ylim = c(-5, 10), xlab = \"\")\nlines(ks$xf[1,,])\nlines(ks$xf + 2*sqrt(ks$Pf[1,,]), lty = 2, col = 4)\nlines(ks$xf - 2*sqrt(ks$Pf[1,,]), lty = 2, col = 4) # variance matrices\n\n\n# ks$xs[1,,] # smooth values\nplot(x[-1], main = \"Smooth\", ylim = c(-5, 10), xlab = \"\")\nlines(ks$xs[1,,])\nlines(ks$xs + 2*sqrt(ks$Ps[1,,]), lty = 2, col = 4)\nlines(ks$xs - 2*sqrt(ks$Ps[1,,]), lty = 2, col = 4) # variance matrices\n```\n\n::: {.cell-output-display}\n![](timeseries_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n::: {.cell hash='timeseries_cache/html/unnamed-chunk-21_21ebbc2e9bf91d307acc1dcc154169f2'}\n\n```{.r .cell-code}\n# creating table for comparison\ntibble(predict = ks$xp[1,,],\n       filter = ks$xf[1,,],\n       smooth = ks$xs[1,,],\n       predict_sd = sqrt(ks$Pp[1,,]),\n       filter_sd = sqrt(ks$Pf[1,,]),\n       smooth_sd = sqrt(ks$Ps[1,,])) %>%\n  mutate(across(predict:smooth, ~scales::number(.x, accuracy = .001)),\n         across(predict_sd:smooth_sd, ~scales::number(.x,accuracy = .01))) %>% \n  transmute(predict = glue(\"{predict} ({predict_sd})\"),\n         filter = glue(\"{filter} ({filter_sd})\"),\n         smooth = glue(\"{smooth} ({smooth_sd})\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 50 √ó 3\n   predict       filter        smooth       \n   <glue>        <glue>        <glue>       \n 1 10.000 (4.58) -0.552 (0.98) -0.538 (0.77)\n 2 -0.552 (1.40) -0.807 (0.81) -0.524 (0.69)\n 3 -0.807 (1.29) -0.810 (0.79) -0.096 (0.67)\n 4 -0.810 (1.27) 0.978 (0.79)  1.048 (0.67) \n 5 0.978 (1.27)  1.490 (0.79)  1.161 (0.67) \n 6 1.490 (1.27)  0.536 (0.79)  0.628 (0.67) \n 7 0.536 (1.27)  0.209 (0.79)  0.778 (0.67) \n 8 0.209 (1.27)  1.438 (0.79)  1.699 (0.67) \n 9 1.438 (1.27)  1.283 (0.79)  2.123 (0.67) \n10 1.283 (1.27)  3.726 (0.79)  3.481 (0.67) \n# ‚Ä¶ with 40 more rows\n# ‚Ñπ Use `print(n = ...)` to see more rows\n```\n:::\n:::\n\n\n\n## Estimation of State Parameters\n\nThere are bayesian methods for estimating the state parameters but also maximum likelihood w/ Newton Raphson or EM algorithmss\n\n## Example: Nile {.tabset}\n\nAnnual flow of the river Nile from 1871 - 1970. There's an apparent changepoint near 1898.\n\nI found this example going through all the state space model libraries. The orginal paper is called \"JSS Journal of Statistical Software, State Space Models in R\".Specifically, we walk through the Nile example with 3 functions: \n\n1. `stats::StructTS`\n2. `dlm:dlmMLE`\n3. `KFAS:kf`\n\n\n::: {.cell hash='timeseries_cache/html/unnamed-chunk-22_d137917b15c918a2934e60c360a2d909'}\n\n```{.r .cell-code}\n# change point analyses\nts.plot(Nile)\n```\n\n::: {.cell-output-display}\n![](timeseries_files/figure-html/unnamed-chunk-22-1.png){width=672}\n:::\n:::\n\n\n### stats::StructTS\n\n\n\n::: {.cell hash='timeseries_cache/html/unnamed-chunk-23_42026751f262f40d45a2c8c72d984741'}\n\n```{.r .cell-code}\nnile_sts <- StructTS(Nile, \"level\")\n# nile_sts %>% tsdiag() # diagnostics of structural model\n\n# values from model.\ntibble(\n  times = time(Nile),\n  filtered = fitted(nile_sts)[,\"level\"], # filtered values\n  smoothed = tsSmooth(nile_sts)[,\"level\"]) # smoothed valuees\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 100 √ó 3\n   times filtered smoothed\n   <dbl>    <dbl>    <dbl>\n 1  1871    1120     1112.\n 2  1872    1141.    1111.\n 3  1873    1073.    1105.\n 4  1874    1117.    1114.\n 5  1875    1130.    1112.\n 6  1876    1138.    1107.\n 7  1877    1049.    1096.\n 8  1878    1098.    1112.\n 9  1879    1171.    1117.\n10  1880    1163.    1098.\n# ‚Ä¶ with 90 more rows\n# ‚Ñπ Use `print(n = ...)` to see more rows\n```\n:::\n\n```{.r .cell-code}\n# forecast values\npredict(nile_sts,n.ahead = 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$pred\nTime Series:\nStart = 1971 \nEnd = 1975 \nFrequency = 1 \n[1] 798.3682 798.3682 798.3682 798.3682 798.3682\n\n$se\nTime Series:\nStart = 1971 \nEnd = 1975 \nFrequency = 1 \n[1] 143.5266 148.5564 153.4215 158.1370 162.7159\n```\n:::\n\n```{.r .cell-code}\n# plotting forecast values, with package forecast\nplot(forecast::forecast(nile_sts, # StructST object\n                   level = c(50, 90), # CI levels\n                   h = 10), # periods of forecasting\n     xlim = c(1950, 1980))\n```\n\n::: {.cell-output-display}\n![](timeseries_files/figure-html/unnamed-chunk-23-1.png){width=672}\n:::\n:::\n\n\n### dlm::dlm\n\n\n::: {.cell hash='timeseries_cache/html/unnamed-chunk-24_329e8026c9adf75adfbdd0688836af5a'}\n\n```{.r .cell-code}\n# set up the dlm object\nnile_dlm_ll <- function(theta){\n  dlmModPoly(order = 1, dV = theta[1], dW = theta[2]) # fits local level model\n}\n\n# calls optim internally to optimize model (default BFGS)\n# could use numDeriv::hessian for numerically accurate evaluation of Hessians\nnile_dlm_mle <- dlmMLE(Nile, # data\n                   parm = c(100, 2), # initial parameters\n                   nile_dlm_ll, # model\n                   lower = rep(1e-4, 2)) \n\nnile_dlm_mle$par # similar variance parameters of local linear model\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 15099.787  1468.438\n```\n:::\n:::\n\n::: {.cell hash='timeseries_cache/html/unnamed-chunk-25_35f4e18e84e48c82e186c62b11e9ce60'}\n\n```{.r .cell-code}\nnile_dlm_ll_best <- nile_dlm_ll(nile_dlm_mle$par) # build model with best fit by optim\nW(nile_dlm_ll_best) # state randomnesss\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n         [,1]\n[1,] 1468.438\n```\n:::\n\n```{.r .cell-code}\nV(nile_dlm_ll_best) # observation error variance\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n         [,1]\n[1,] 15099.79\n```\n:::\n\n```{.r .cell-code}\n# can use fitted model to create smooth estimates now\n# $s has time series of smooth estimates\n# $U.S and $D.S have SVD of smoothing varriances (for std err)\nnile_dlm_ll_smooth <- dlmSmooth(Nile , nile_dlm_ll_best)\n# conf ints can be calculated by\n```\n:::\n\n::: {.cell hash='timeseries_cache/html/unnamed-chunk-26_dc3bd583a3ce0657e3547852bb9fbf8f'}\n\n```{.r .cell-code}\n# calculate standard errors\nhwidth <- sqrt(unlist(dlmSvd2var(nile_dlm_ll_smooth$U.S, nile_dlm_ll_smooth$D.S))) * qnorm(0.025, lower = FALSE)\nnile_dlm_ll_smooth_ci <- cbind(nile_dlm_ll_smooth$s, as.vector(nile_dlm_ll_smooth$s) + hwidth %o% c(-1, 1))\nautoplot(nile_dlm_ll_smooth_ci) + theme(legend.position = \"\") +\n  labs(title = \"smoothed kalman with CI\") +\n  geom_point(data = tibble(time = time(Nile),\n                           flow = Nile,\n                           series = \"real\"),\n             mapping = aes(time, flow))\n```\n\n::: {.cell-output-display}\n![](timeseries_files/figure-html/unnamed-chunk-26-1.png){width=672}\n:::\n:::\n\n\n### KFAS::KFS\n\nKalman filtering/smoothing/simulation for linear state space models in the exponential family. KFAS uses the sequential processing method. This package uses a slightly different parameterization of their state space models.\n\n$$\n\\begin{aligned}\ny_t &= Z_t\\alpha_t + \\varepsilon_t &\\text{observation}\\\\\n\\alpha_{t+1} &= T_t \\alpha_t + R_t\\eta_t &\\text{transition}\n\\end{aligned}\n$$\n\n\n::: {.cell hash='timeseries_cache/html/unnamed-chunk-27_fda6f380c433cee202c772231a4dfa75'}\n\n```{.r .cell-code}\n# build the local linear model\n# can initialize a specific model with values\n# nile_kfas_ll_model <- SSModel(Nile ~ SSMtrend(1, Q = 15000), # Q = Transition error\n#                               H = 30) # Observation error\n\n# add NA for values you want to optimize\nnile_kfas_ll_model <- SSModel(Nile ~ SSMtrend(1, Q = list(matrix(NA))), # Q = Transition error\n                              H = matrix(NA)) # Observation error\n\n\n# fit the model with wrapper to `optim`\n# -logLik(nile_kfas_ll_model) # is the objective that is optimized\nnile_kfas_ll_fit <- fitSSM(nile_kfas_ll_model,\n       c(log(var(Nile)), log(var(Nile))), # initial parameters for optim\n       method = \"BFGS\")\n\n# extract just the optimal model\nnile_kfas_ll <- nile_kfas_ll_fit$model\n\n# Filter/smooth\nnile_kfas_ll_smooth <- KFS(nile_kfas_ll,\n    filtering = \"state\",\n    smoothing = \"state\")\n\n# autoplot calls fortify, grabbing some components of the model\n# ggfortify:::autoplot.KFS\n# fortify(nile_kfas_ll_smooth)  # create df with: time, raw y, alphahat (smoothed values), raw residual = raw y - alphahat\n# nile_kfas_ll_smooth$alphahat # contains smoothed state variable estimates. for some reason \"fitted\" doesn't return these.\nautoplot(nile_kfas_ll_smooth)\n```\n\n::: {.cell-output-display}\n![](timeseries_files/figure-html/unnamed-chunk-27-1.png){width=672}\n:::\n:::\n\n::: {.cell hash='timeseries_cache/html/unnamed-chunk-28_abfdf6824f6e91805867f295568da1b6'}\n\n```{.r .cell-code}\n# these give same values\n# cbind(predict(nile_kfas_ll),\n      # nile_kfas_ll_smooth$alphahat)\n\nnile_kfas_ll_ci <- predict(nile_kfas_ll, interval = \"confidence\", level = .9)\nnile_kfas_ll_pi <- predict(nile_kfas_ll, interval = \"prediction\", level = .9)\n\n\nlegend_labels <- c(\"lower_ci\", \"upper_ci\", \"fit\", \"lower_pi\", \"upper_pi\")\n# forecast:::autoplot.mts\nautoplot(cbind(nile_kfas_ll_ci[,-1], nile_kfas_ll_pi),\n         mapping = aes(x, y, group = series, linetype = series)) +\n  scale_linetype_manual(values = c(2, 2, 1, 3, 3), labels = legend_labels) +\n  scale_color_manual(values = c(2, 2, 1, 3, 3), labels = legend_labels) +\n  labs(y = \"Predicted Annual flow\", main = \"River Nile\") \n```\n\n::: {.cell-output-display}\n![](timeseries_files/figure-html/unnamed-chunk-28-1.png){width=672}\n:::\n:::\n\n::: {.cell hash='timeseries_cache/html/unnamed-chunk-29_2e2ef1a8e7002a0f7903bd5adff90db9'}\n\n```{.r .cell-code}\n# forecasting\nnile_kfs_mean <- KFS(nile_kfas_ll,\n    filtering = c('state')) # specifying \"mean\" only estimates the smooths (alphahat)\n\ncbind(predict = nile_kfs_mean$a, # one step ahead prediction\n      filter = nile_kfs_mean$att, # filter estimates\n      smooth = nile_kfs_mean$alphahat) %>%  # smoothed\n  autoplot() + \n  coord_cartesian(ylim = c(700, 1250)) +\n  labs(title = \"predict/filter/smooth estiamtes of Nile with KFS\")\n```\n\n::: {.cell-output-display}\n![](timeseries_files/figure-html/unnamed-chunk-29-1.png){width=672}\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}