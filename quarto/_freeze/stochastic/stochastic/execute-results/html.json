{
  "hash": "ebd7c9d4df9099184bfd8ea907b995a1",
  "result": {
    "markdown": "---\ntitle: \"Stochastic\"\nauthor: \"Michael Liou\"\nformat: html\neditor: visual\nresources: \"vid/*\"\n---\n\n::: {.cell hash='stochastic_cache/html/unnamed-chunk-1_12f7fda96035e34fb540a10af557a127'}\n\n:::\n\n\n## Gamblers Ruin\n\nThe random walk we're simulating is a symmetric random walk from some initial location, and calculating the expected hitting time of crossing some upper or lower boundary\n\n\n::: {.cell hash='stochastic_cache/html/unnamed-chunk-2_b112053bbb9f288811fbced274f73217'}\n\n:::\n\n::: {.cell hash='stochastic_cache/html/unnamed-chunk-3_547690ee80e6550caf247d8d5987b65e'}\n\n```{.r .cell-code}\nset.seed(20)\nk <- 10\nrw <- rw_sim(a, b, p, k, return_path = TRUE)\n\nqplot(0:(length(rw) - 1), rw, geom = \"line\", xlab = \"time\", ylab = \"state\", linetype = \"random walk path\") + \n  geom_hline(yintercept = b, color = \"tomato1\") + \n  geom_hline(yintercept = a, color = \"tomato1\") +\n  annotate(\"point\", x = 0, y = 10, size = 2, color = \"lightblue\") +\n  annotate(\"label\", label = \"k - initial state\", x = 3, y = 9, fill = \"lightblue\", size = 2) +\n  annotate(\"point\", x = 44, y = 0, size = 2, color = \"lightblue\") +\n  annotate(\"label\", label = \"T - hitting time\", x = 41, y = 1, fill = \"lightblue\", size = 2) +\n  scale_linetype_manual(values = c(3)) + \n  labs(linetype = \"\",\n       title = \"Hitting Times of Random Walk\") + \n  lims(y = c(a, b)) + \n  theme_minimal() + \n  theme(legend.position = \"bottom\")\n```\n\n::: {.cell-output-display}\n![](stochastic_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\nBy theory, for the symmetric random walk, (see Durrett)\n\n$$\n\\begin{aligned}\nE[T|X_0 = k] = (k - a)(b - k)\n\\end{aligned}\n$$\n\n\n::: {.cell hash='stochastic_cache/html/unnamed-chunk-4_727c7cb50e5c47332c8c1246ea4abdf5'}\n\n```{.r .cell-code}\nhitting_times <- replicate(10000,\n                           rw_sim(a,b,p, k))\nmean(hitting_times)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 101.0178\n```\n:::\n:::\n\n\n## Stochastic Processes\n\nA great overview of Differential Equations in R is covered by\n\n-   \"sde\" - stochastic differential equations\n-   \"Sim.DiffProc\"- simulate diffusion processes\n-   \"ReacTran\" - functions for generating finite differences on a grid\n\n### Wiener Process\n\nThe most basic wiener process takes the form, which describes Brownian motion. This differential equation models 1 dimensional diffusion, and to see this, we can imagine the probability distribution over time. Each of the sample paths are a random walk with gaussian increment with proportional\n\n$$\ndx = dW\n$$\n\n-   $x$ is the position, which is a function of time\n-   $dW$ is the Wiener Noise, gaussian distribution with\n\n\n::: {.cell hash='stochastic_cache/html/unnamed-chunk-5_c8af96190a73fb541f2552082b997685'}\n\n```{.r .cell-code}\nx0 <- 0 # initial position\nt0 <- 0 # initial time\ndt <- .01\nnt <- 100 # how many time steps to take, \ndx <- rnorm(nt, 0, dt) # sample steps\nx <- cumsum(c(x0, dx)) # sample path\n\nrwiener <- function(x0 = 0, t0 = 0, dt = .01, nt = 100) {\n  dx <- rnorm(nt, 0, sqrt(dt)) # sample steps\n  cumsum(c(x0, dx)) # sample path\n}\n\nset.seed(1)\nwiener_paths <- replicate(2000, rwiener())\nwiener_ts <- ts(wiener_paths, start = t0, deltat = dt)\nts.plot(wiener_ts, col = rgb(0,0,0,alpha = .03), ylim = c(-4, 4), main = \"Wiener Sample Paths\")\n```\n\n::: {.cell-output-display}\n![](stochastic_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\nInstead of the sample path approach, if we instead think about the probability density of our position as a function of time, we can see that the probability function becomes more diffuse over time. Thus, it's not surprising that we can describe the diffusion with a PDE through the Fokker-Plank Equation.\n\n\n::: {.cell hash='stochastic_cache/html/unnamed-chunk-6_5f82fc1e7c1dc12503f641cce1d7c236'}\n\n```{.r .cell-code}\n# code to create animations\nx <- seq(-3, 3, by = .01)\n# animation of density\nsaveGIF({\n    for (i in 2:100)  {\n      hist(wiener_ts[i,], xlim = c(-3, 3), ylim = c(0, 10),\n           freq = F,\n           breaks = 40,\n           main = paste0(\"Density of Sample Paths, Time = \", i*dt),\n           xlab = \"x\")\n      lines(x, dnorm(x, sd = sqrt(dt * i)), col = \"red\")\n      legend(\"topright\", legend = c(\"theoretical density\"), col = 2, lty = 1, bty = \"n\")\n    }\n}, movie.name = \"test.gif\", loop = T, interval = .01)\n\n# along the sample paths\nsaveGIF({\n    for (i in 2:100)  {\n      ts.plot(wiener_ts, col = rgb(0,0,0,alpha = .03), ylim = c(-4, 4), main = \"Wiener Sample Paths\")\n      abline(v = i * dt, col = \"red\")\n    }\n}, movie.name = \"sample.gif\", loop = T, interval = .01)\n```\n:::\n\n\n::: {layout-ncol=\"2\"}\n![](sample.gif)\n\n![](test.gif)\n:::\n\nThe associated Fokker Plank equation associated with this stochastic differential equation, is simply the heat equation.\n\n$$\n\\frac{\\partial}{\\partial t} P(x, t) =\\frac{1}{2}\\frac{\\partial^2}{\\partial x^2}P(x,t)\n$$\n\n-   Initial condition: $P(x, 0) = \\delta(x)$\n-   $\\delta(x)$ is the delta-dirac function, which has infinite mass at 0.\n-   Boundary Condition: $P(a, t) = P(b, t) = 0$\n    -   since our simulation has to occur on some bounded region $[a,b]$, we just set the simulation to have absorbing boundaries.\n\nSolving the PDE with initial value conditions analytically, we find that the solution to this eigenvalue problem is\n\n$$\n\\begin{aligned}\nP(x, t) = \\frac{1}{\\sqrt{2\\pi t}}\\exp \\left(\\frac{x^2}{2t}\\right)\n\\end{aligned}\n$$\n\nWe can also calculate the solution by finite differencing. We can solve the PDE and show that our solutions match the rate given by the SDE formulation of the PDE. We use code from the [vignette of the `ReacTran` R package](https://rdrr.io/rforge/diffEq/f/inst/doc/PDEinR.pdf). `ReacTran` package uses the method of lines for solving PDE's, in which we set up a discretized grid, and solve the ODE as a vector\n\n\n::: {.cell hash='stochastic_cache/html/unnamed-chunk-7_a784d21a2d63f71bffe9b4120b4a36f8'}\n\n```{.r .cell-code}\n# ReacTran uses the\nN <- 601\nxgrid <- setup.grid.1D(x.up = -3, x.down = 3, N = N) # grid of values\nx <- xgrid$x.mid\nD.coeff <- .5 # diffusion coefficient from solving FP\n\n# defines the diffusion (the derivative with respect to time)\n# Since our function has no time dependence, we only need to calculate the derivatives for the next step\nDiffusion <- function (t, Y, parms){\n  tran <- tran.1D(C = Y, C.up = 0, C.down = 0, # dirchlet boundary conditions, set to 0\n                D = D.coeff, dx = xgrid)\n  list(dY = tran$dC)\n}\n\n# Set initial condition of the differential equation, we approximate the \nYini <- c(rep(0, 300), 100, rep(0, 300)) # very tall initial mass\ntt <- seq(t0, dt * nt, dt) #times to simulate\n\n# solve heat equation\nout <- ode.1D(y = Yini, times = tt, func = Diffusion, parms = NULL, dimens = N)\n\n# library(tidyverse)\ncolorBreaks = 10^(seq(-2, 2, length.out = 255)) # different\nplot(raster(t(out[,-1]), xmn =0, xmx = 1, ymn = -3, ymx = 3),\n     asp = NA,\n     breaks = colorBreaks,\n     col = rev(hcl.colors(length(colorBreaks) - 1L, palette = \"Rocket\")), legend = FALSE,\n     xlab = \"time\", ylab = \"x\", interpolate = TRUE)\n```\n\n::: {.cell-output-display}\n![](stochastic_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n### Ornstein-Uhlenbeck Process\n\nAdding a drift term to the stochastic equation, gives the stochastic equation a mean. The negative in front of the drift implies that it will always regress to 0, because it's a function of $x$ (kind of like a spring constant). The $\\theta$ parameter controls how strong the restoring force is.\n\n$$\ndx = -\\theta x\\, dt + \\sigma \\, dW\n$$\n\n-   $x$ is position, which is a function of time.\n-   $dW$ is the wiener process.\n-   $\\theta$ is the rate of return to the mean (0)\n-   Variance of\n\nThe following shows the effect of the parameters $\\theta = 3$ and $\\sigma = .5$ with initial state $x_0 = 5$. We also show the process with a different initial state $x_0 = -3$ to show the restoring effect to the mean.\n\n\n\n\n::: {.cell hash='stochastic_cache/html/unnamed-chunk-9_c7cd1467a31dd045b5ee3a16e7b03f90'}\n\n```{.r .cell-code}\n# OU function\nou_paths <- function(npaths = 1, theta = 3, sigma = .5, x0 = 5, nt = 100, t0 = 0, dt = .01) {\n  sde_path_ou <- function() {\n    x <- vector(mode = \"numeric\", length = nt + 1)\n    x[1] <- x0\n    wiener_noise <- rnorm(nt, sd = sqrt(dt))\n    for (i in 1:nt) {\n      dx <- -theta * x[i] * dt + sigma * wiener_noise[i]\n      x[i+1] <- x[i] + dx\n    }\n    return(x)\n  }\n  ts(replicate(npaths, sde_path_ou()), start = t0, deltat = dt)\n}\n\ntheta <- 3\nsig <- .5\ny0 <- 5\nnt <- 100\ndt <- .01\nt0 <- 0\n\nset.seed(1)\nou_ts <- ou_paths(npaths = 500, theta = theta, sigma = sig, x0 = y0, nt = nt, t0 = t0, dt = dt)\n\nts.plot(ou_ts, col = rgb(0,0,0,alpha = .05)) # plot\n\ntt <- seq(0, 1, .01)\ntheory_mean <- y0*exp(-theta*tt)\ntheory_var <- sig^2 / 2 / theta * (1 - exp(-2 * theta * tt))\n\nlines(tt, theory_mean, col = \"red\")\nlines(tt, theory_mean + 2 * sqrt(theory_var), lty = 2, col = \"red\")\nlines(tt, theory_mean - 2 * sqrt(theory_var), lty = 2, col = \"red\")\nlegend(\"topright\", legend = c(\"mean\", \"\\u00B1 2sd\"), col = 2, lty = 1:2)\n```\n\n::: {.cell-output-display}\n![](stochastic_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\nBecause of this restoring property to the mean, a closely related stochastic process is known as the Vasicek model (commonly used to model interest rates), which adds another parameter to control what the mean is.\n\n$$\ndx = \\theta(\\mu - x)\\, dt + \\sigma \\, dW\n$$\n\n-   reduces to the 0 mean OU process when $\\mu = 0$.\n\n-   The long term variance of this model is also\n\n\n\n\n\nThis process is important because it's the continuous time analogue of a discrete time AR1 process.\n\nSimilarly, the associated Fokker-Plank Equation for this SDE is:\n\n$$\n\\begin{aligned}\n\\frac{\\partial P(x, t)}{\\partial t} = -\\mu \\frac{\\partial P(x, t)}{\\partial x} + \\frac{\\sigma^2}{2}\\frac{\\partial^2P(x, t)}{\\partial x^2}\n\\end{aligned}\n$$\n\n\n::: {.cell hash='stochastic_cache/html/unnamed-chunk-11_0046c9d3c3d3ee857e85c60442fef8ce'}\n\n```{.r .cell-code}\n# simulation parameters\nt0 <- 0                       # time start\ndt <- .01                     # time step \ntn <- 1                       # time end\nnt <- tn/dt                   # number of time steps\ntgrid <- seq(t0, nt * dt, dt) # time grid\n\nx0 <- 6                       # space start\nxn <- -2                    # space end\nnx <- 800                     # number of grid points\nxgrid <- setup.grid.1D(x.up = x0, x.down = xn, N = nx) # space grid\nx <- xgrid$x.int\n\nsig <- .5            # Parameters from OU simulation\nmu <- -3             # Parameters from OU simulation  \nD_coef <- sig^2 / 2  # Diffusion function\n\ny0 <- c(rep(0, 100), 100, rep(0, 699))                 # initial condition\n\n# advection-diffusion (method of lines)\nadvec <- function(t, Y, parms) {\n  trans <- tran.1D(C = Y, D = D_coef, v = mu*x, C.up = 0, C.down = 0, dx = xgrid)\n  return(list(dY = trans$dC))\n}\n\n# solve advec/diffusion equation\nout <- ode.1D(y = y0, times = tgrid, func = advec, parms = NULL, dimens = nx)\n\n# plot solution\ncolorBreaks = 10^(seq(-3, 3, length.out = 255)) # different to capture more drift in lower parameters\nplot(raster(t(out[,-1]), xmn = 0, xmx = 1, ymn = xn, ymx = x0),\n     asp = NA,\n     breaks = colorBreaks,\n     col = rev(hcl.colors(length(colorBreaks) - 1L, palette = \"Rocket\")), legend = FALSE,\n     xlab = \"time\", ylab = \"x\", interpolate = TRUE)\n```\n\n::: {.cell-output-display}\n![](stochastic_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# rcOU(n=1, Dt=0.1, x0=1, theta=c(0,2,1))\n```\n:::\n\n\n::: {.callout-note appearance=\"minimal\" icon=\"false\"}\n### ODE for Mean/Variance of OU process\n\nWe can get a First Order ODE characterization of the mean and variance for the Ornstein-Uhlenbeck process.\n\n\n```{=tex}\n\\begin{aligned}\n\\frac{d\\langle x \\rangle}{dt} = -\\theta \\langle x \\rangle \\\\\n\\langle x\\rangle = \\langle x_0 \\rangle e^{-\\theta t}\n\\end{aligned}\n```\n\n$$\n\\frac{dV}{dt} = -2 \\theta V + \\sigma^2\n$$\n\n::: {.callout-note collapse=\"true\" appearance=\"minimal\" icon=\"false\"}\n### Proof\n\n$$\ndx = -\\theta x\\, dt + \\sigma\\, dW\n$$ First we note the expression for the derivative of variance, and calculate the necessary components.\n\n$$\n\\begin{align*}\n\\frac{dV}{dt} &= \\frac{d\\langle x^2\\rangle}{dt} - \\frac{d \\langle x\\rangle^2}{dt} \\\\\n&= \\frac{d\\langle x^2\\rangle}{dt} - 2 \\langle x\\rangle \\frac{d \\langle x\\rangle}{dt}\n\\end{align*}\n$$\n\nHence, we need to evaluate the mean differentials to the second order, from\n\n$$\n\\begin{align}\nd\\langle x\\rangle &= -\\theta \\langle x\\rangle \\, dt\\\\\ndx^2 &= (x + dx)^2 - x^2 \\\\\n&=2x\\,dx + (dx)^2 \\\\\n&= (-2\\theta x^2 + \\sigma^2)\\,dt + \\sigma \\, dW \\\\\nd\\langle x^2\\rangle &= (-2\\theta \\langle x^2\\rangle + \\sigma^2)\\, dt\n\\end{align}\n$$\n\nWe've used that the rules of Ito's calculus, that $dt\\,dW = 0, (dW)^2 = dt, (dt)^2 =0$. Plugging in the values and simplifying gives us the desired result.\n:::\n:::\n\n\n::: {.cell hash='stochastic_cache/html/unnamed-chunk-12_7989fae56d0d8136fda25c07ec50a8ef'}\n\n```{.r .cell-code}\ntheta <- 3\nsig <- .5\n\n# simplest first order ode\nou_mean <- function(t, y, parms) {\n  dy <- -theta * y\n  return(list(dy))\n}\n\n\nx0 <- 5 # initial mean\ntt <- seq(0, 1, by = .01)\nout_mean <- ode(x0, tt, ou_mean, parms = NULL)\n\ncbind(out_mean[,2],\n      5 * exp(-3* tt)) |> head() # matches\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n         [,1]     [,2]\n[1,] 5.000000 5.000000\n[2,] 4.852224 4.852228\n[3,] 4.708817 4.708823\n[4,] 4.569653 4.569656\n[5,] 4.434600 4.434602\n[6,] 4.303538 4.303540\n```\n:::\n\n```{.r .cell-code}\n# function coding differential equation \nou_var <- function(t, v, parms) {\n  dv <- -2 * theta * v + sig^2\n  return(list(dv))\n}\n\ny0 <- 0 # initial variance\ntt <- seq(0, 1, by = .01)\n\nout <- ode(y0, tt, ou_var, parms = NULL)\n\ncbind(out[,2],\n      sig^2 / 2 / theta * (1 - exp(-2 * theta * tt))) |> head() # matches!\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n            [,1]        [,2]\n[1,] 0.000000000 0.000000000\n[2,] 0.002426880 0.002426478\n[3,] 0.004712408 0.004711648\n[4,] 0.006864444 0.006863741\n[5,] 0.008891073 0.008890506\n[6,] 0.010799760 0.010799241\n```\n:::\n:::\n\n\n### General Linear SDE\n\n$$\ndx = -\\gamma x \\, dt + g x\\, dW\n$$\n\n## Simulating Stochastic Differential Equations\n\nFollowing the [package vignette](https://cran.r-project.org/web/packages/Sim.DiffProc/vignettes/snssde.html)\n\n- `rsde1d` - random deviates from a sde object\n- `dsde1d()` - approximate density from sde object\n- `snssde2d()` - simulates 2d sde\n\nWe simulate from the example\n\n$$\n\\begin{aligned}\ndX = \\frac{1}{2}\\theta^2Xdt + \\theta X dW\n\\end{aligned}\n$$\n\nSolving this for the steady state mean, then we get\n\n$$\n\\begin{aligned}\nE[X| t= 1, x_0 = 10, \\theta = .5] = \\exp{\\left(\\frac{1}{2}\\theta^2t\\right)}\n\\end{aligned}\n$$\n\n\n::: {.cell hash='stochastic_cache/html/unnamed-chunk-13_98bae28e82ea98db785da9acad2a1b2d'}\n\n```{.r .cell-code}\nlibrary(sde)\nlibrary(Sim.DiffProc)\nset.seed(1234, kind = \"L'Ecuyer-CMRG\")\ntheta <- .5\nf <- expression((.5*theta^2*x))\ng <- expression(theta*x)\nmod1 <- snssde1d(drift = f, \n                 diffusion = g, # for the random gaussian portion\n                 x0=10, # initial conditions\n                 t0=0,\n                 T = 5,\n                 M = 1000, # number of sample solutions to simulate\n                 type = \"ito\", # type of integral\n                 method = \"euler\") # method\n\nmod2 <- snssde1d(drift = f, diffusion = g, x0=10, M = 1000, type = \"str\")\n\n# many summary and confidence intervals.\nsummary(mod1, at = .3) # by monte carlo of fitting the stochastic paths of the pandemic\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n\tMonte-Carlo Statistics for X(t) at time t = 0.3\n                             \nMean             1.017744e+01\nVariance         8.046738e+00\nMedian           9.705629e+00\nMode             8.953720e+00\nFirst quartile   8.137266e+00\nThird quartile   1.178582e+01\nMinimum          3.875000e+00\nMaximum          2.458763e+01\nSkewness         9.007665e-01\nKurtosis         4.327431e+00\nCoef-variation   2.787220e-01\n3th-order moment 2.056089e+01\n4th-order moment 2.802011e+02\n5th-order moment 2.130882e+03\n6th-order moment 2.519499e+04\n```\n:::\n\n```{.r .cell-code}\nsummary(mod1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n\tMonte-Carlo Statistics for X(t) at time t = 5\n                             \nMean             1.852923e+01\nVariance         8.618737e+02\nMedian           9.895477e+00\nMode             4.667985e+00\nFirst quartile   4.490471e+00\nThird quartile   2.092506e+01\nMinimum          3.555266e-01\nMaximum          3.234119e+02\nSkewness         5.208753e+00\nKurtosis         4.095205e+01\nCoef-variation   1.584399e+00\n3th-order moment 1.317951e+05\n4th-order moment 3.042026e+07\n5th-order moment 7.738945e+09\n6th-order moment 2.080372e+12\n```\n:::\n:::\n\n::: {.cell hash='stochastic_cache/html/unnamed-chunk-14_7486d6aee22c26dad81791f753d3aebb'}\n\n```{.r .cell-code}\n# sample from the conditional distribution, conditional on the initial value.\nrsde1d(mod1, at = 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   [1]  8.735682  7.344977  8.438110 11.141480  5.586668  6.867419  7.721280\n   [8] 12.731186 10.360972  6.018939 14.066648 17.632072 11.276746 11.415946\n  [15]  8.265950 14.989736 14.369225  4.820591  5.271232 20.415143 17.979233\n  [22] 13.230907  6.887687  2.187285 12.242744 14.272089 20.569979  7.562125\n  [29] 12.919931 19.054617 18.087574  9.257144  9.943448 15.041281 12.334913\n  [36] 18.685543 14.704401  4.301899 16.709410 14.305020  6.789316 13.940393\n  [43]  6.961607 11.836772  4.334405 10.145721  5.925220  5.398389 15.377760\n  [50] 14.162652  9.727295  9.029960  8.911256  6.229414 15.443105  9.591912\n  [57]  2.272097  6.588119  4.347615 12.435848 14.882340 14.506381 14.865681\n  [64] 19.749515  5.319737  6.020032  7.552928 13.851179  6.560008 11.221533\n  [71] 23.895195  8.199682 13.339344  8.177069 10.998979 10.382818  6.421800\n  [78]  5.117034 11.057268 13.411960 21.883071  7.458649  2.764852  7.795483\n  [85]  3.494987  8.436737 29.733549 10.116049 11.144152  9.677250  5.530168\n  [92]  4.957671 13.428547  4.674463  9.916626  9.569839  7.427121  8.724480\n  [99] 13.887375 37.832214  4.827476  7.409082  7.590002  6.832259  5.701437\n [106] 10.939493 10.508211 10.489977  9.168765  5.442206 16.367188 12.729222\n [113]  8.394352  6.296143  6.000235 12.853669 15.592119  3.305159 19.224247\n [120] 10.097026 44.081143  5.302471  6.619034 21.294119  9.883666  7.660163\n [127] 16.111134  8.640803  9.070033  8.521571 14.957914  9.737643 14.314386\n [134]  8.301395 16.850106  4.723184 10.570269  8.751662  6.431607  6.979234\n [141]  5.511512 26.072577 15.973050 13.956336 22.281831  7.980447  5.167372\n [148] 13.633486 10.902735  4.777038  5.237959  8.998896 14.379111 16.796432\n [155] 17.796592  4.844048 15.062977  7.677406  8.445849 12.292614 10.925302\n [162]  4.170871 11.204972 12.258030  6.415237  6.684313  5.495029  6.850544\n [169] 10.913465 49.550683  7.601754  9.877510 11.417959 11.645556 31.897234\n [176] 18.124257  7.917117  9.229859 23.545624  5.907581  6.367854 16.060443\n [183] 16.906608 15.458326  7.382460 12.498490  6.763430 18.322312 12.067221\n [190]  6.080208 10.249380 18.303086 18.264506  8.728580  3.651273 11.783608\n [197]  5.060811 12.424674  8.349002  8.469587  7.752336 16.294506  7.827614\n [204]  7.571563 10.349443 12.190055  6.931615  6.369010  8.259565  9.588349\n [211] 12.020285  7.922763 14.949491 30.392037  5.264710 10.551347  3.384744\n [218] 20.320983 21.856545 11.647066  8.165454 29.861374  6.168673 19.204258\n [225]  8.919032 15.066448  6.130486  6.481084  8.632471  6.292030 40.124115\n [232]  9.637588  4.706044 17.181973 11.534985 19.559957 12.331954 20.305912\n [239] 18.928723  8.605554 23.624724 16.527202 14.367721 10.695400 12.257499\n [246] 10.192400  8.192270  7.672497 11.238924 19.316097 15.986567 15.611011\n [253] 17.519380 29.201258 11.289080  9.692351  8.599260  8.392094  5.994662\n [260]  4.420677 25.570475  3.042475 15.181913 13.223439  8.824830 17.427158\n [267] 10.109894 10.619604  9.990138 12.708607  5.451930 16.366812 17.749570\n [274] 11.251404 22.060901 13.359091  4.418347 18.234523  5.836354 10.997174\n [281]  2.883649 15.985710 18.634768 33.745729 11.946528  9.440531 16.152732\n [288] 14.880520  9.168743  8.631228 12.753438  8.075738  9.693134  8.342836\n [295] 20.006189  8.524874  8.663646  7.597066  4.401652 10.961263 15.295185\n [302] 12.127061 10.941505  7.115255  6.663204  5.789734  9.589647 22.846088\n [309] 10.453168  9.980825  3.215731  6.744712  7.847761 14.446800  8.132224\n [316]  4.591336 11.428826 15.692374  6.720083  8.102107 12.109067 19.693051\n [323] 13.334106  3.227853 21.016287 21.537173 20.175474  4.583812  7.857081\n [330]  6.969925 32.054799 10.944720  8.072071  6.843841  7.302450 10.995340\n [337]  9.145603 11.263114 17.169122 14.213967 16.979699 13.092382  7.531280\n [344] 30.619403 13.971973  9.822643  6.179722  8.576703 10.338145  6.566865\n [351]  7.620894 10.133430 15.163833 13.274279  6.832292  6.943379 18.555874\n [358] 12.687174 10.018740  6.257596 11.429321 13.087985  2.259171 20.971742\n [365]  6.334067 10.045572  8.205755 11.711326  9.118618  6.676735  8.117085\n [372] 10.928763 11.507133 15.253922 14.932853 10.061278  6.164131  6.546635\n [379]  8.625697 12.149510 11.037470  9.079694 16.082104  8.482924 14.318134\n [386] 15.781915 10.291881 21.851704 13.871237  4.276425  6.207424  8.029599\n [393] 11.960281  5.559591 17.291110  9.677869 11.317548 14.330349  7.810183\n [400] 11.656946 16.664891  8.091306  6.034429 10.601989 16.624960 14.969227\n [407] 13.382674  6.649358 13.085946 14.187247  9.598343 15.411206 13.089092\n [414] 14.619234 10.976456  4.399503 12.225032 16.272124  9.255786 13.420766\n [421] 18.237756  7.717608 18.250837  5.484751  6.033969 14.973058 11.576019\n [428] 10.466406 12.671159  8.899241  6.791583 13.422994  7.357089  9.806762\n [435]  6.560399 12.105947  7.946314 33.023914  5.394390 13.579767  6.886571\n [442] 14.622790  6.475099 12.496643  8.585582 20.881496 20.479550 17.481984\n [449]  9.297564  3.450331  3.797576  8.111555  6.171378  7.966105  7.236737\n [456]  5.465096  8.596575  7.817410 11.538488  8.766524  4.827839  4.502377\n [463]  8.901147  6.473632  6.663416 10.265154  5.874232  9.001177  5.715018\n [470]  7.121910  4.041778  8.754861  6.287263  8.973394 18.717558 26.161071\n [477] 12.311441  7.612512 10.106153  7.446709  7.541342 13.020324  9.146652\n [484]  6.766166  7.457560  8.290926 16.938588  4.856854  7.589751  7.947044\n [491]  7.950814 10.750785 10.159217 13.429467  7.771240 30.121005 12.172068\n [498]  7.950629 10.462018 18.088553 16.483523 12.694791 14.671843  4.005193\n [505] 10.586292  5.729691 16.966844 14.672584 13.066228  4.742985 12.670527\n [512] 14.901270 18.209804  7.604993 18.141755  7.688447  8.227291  8.361436\n [519]  7.597488 12.209817  6.828570 35.243991 13.958377 10.593089 13.057116\n [526]  7.254756  4.808694  5.429336  6.925283 22.640658  9.531312  9.404048\n [533]  8.583732 14.259011 13.305016 15.772552  7.110868  3.864934 34.554205\n [540]  6.916409  5.647479  9.822804  9.394861 11.844615  5.138353 19.474611\n [547] 10.302989 16.462268  8.716621  6.470711 20.181255  6.802601 15.097106\n [554]  8.314611 13.665932  4.746037 11.280094  6.382058 14.532618  4.592776\n [561]  9.385172  6.616017  4.370788 15.934445  9.220422  8.052510  6.414038\n [568]  9.319051 10.461963  9.163073 18.131839 11.405959  5.050081 14.878276\n [575]  9.440306  7.242909  9.685178 12.001159  7.626404  5.841647  9.401417\n [582] 10.913486  8.137871  8.250435  6.241282 20.503743  6.835440  4.075568\n [589] 13.317741  8.908230  9.607514  8.781462 11.559201  8.523228  6.189690\n [596]  5.004807  8.544644  6.622334  8.725181  4.556923  6.967527  9.825650\n [603]  6.800849  3.373310 11.958287  5.057759  3.275936  7.252035  7.505889\n [610]  4.961906 15.925863 10.456583  7.333704 13.069035  9.165401  8.437423\n [617] 24.225879 10.719532  9.378575 13.554836  6.170304 11.845080 12.074063\n [624] 11.107898 17.352267  6.122797  9.149488  8.901404 14.308107 11.750440\n [631] 34.384038 10.906011 28.107689  6.623738 17.509469  8.522182  5.067133\n [638] 11.250448  6.978229 13.314177 14.338646 10.854989  7.925843 13.071727\n [645] 16.835856  4.845624  9.226108 13.642872  5.772860  8.887952  5.243541\n [652]  4.263603 23.188352 13.690002 20.874907  8.918477 10.476960  6.636883\n [659]  8.761189  4.709350 11.320123 24.507418  9.163258  8.992812  8.472868\n [666]  5.879822  4.797541 12.477772  8.286386  5.717944  5.165515  9.274063\n [673] 15.228879 16.709629  6.133527 13.981494 14.309024  4.264435 26.002135\n [680] 13.968556  7.814676  5.876766 10.549172 20.794342  5.853262  8.843604\n [687]  3.812978 17.399245  7.863833 25.094374  8.615947  7.964152 13.314466\n [694] 12.680812  4.923450  6.455609 11.434462 14.541552  8.714530 12.612795\n [701]  6.163971 15.209324  6.847874  3.844012  7.103783  7.574910 10.795806\n [708] 16.410587  5.662586 13.531550 33.414515  7.564603  5.195435 13.201671\n [715]  4.325110 10.617245 10.300937 11.935363 13.869749  8.080492 15.102606\n [722] 16.282545  5.176784  5.136219  5.285879  5.625455  7.506466  4.921103\n [729]  6.765790  7.958353  7.963147  6.934881  3.619867  6.484795 10.017483\n [736] 18.284185  8.898351  7.059117  6.588445  7.935032  6.322977 41.917574\n [743] 12.404358 14.242764  5.097891 14.854218  7.547913  8.666346 13.214126\n [750]  5.100667 12.028939 10.790179 12.294230  9.122289  6.434208  5.884426\n [757] 13.364949  8.006220 19.007541 10.488436  8.082841 13.238103  6.719256\n [764]  7.227000 16.549775  7.153885 12.443782  9.452624 25.252522  9.817281\n [771] 12.822458  9.911348  5.790378  3.705566  3.895793 21.127984 11.495832\n [778] 15.299475 19.963282 11.816459  6.252820  8.443047 15.334389  6.132213\n [785] 12.981232 10.010884  5.690510 10.145072 25.650558 12.716718  6.782282\n [792]  6.562549 16.509622  6.600271 37.759372  7.100508 14.414004  3.065307\n [799] 10.515343 13.527511  7.875056 13.066810  4.108463 11.023320 11.310364\n [806]  5.734216  4.638748 11.251885  5.755294 35.481208 15.873180 17.853320\n [813] 10.019237 10.815541  7.331981 13.915003 17.168597 27.299591  4.626265\n [820] 11.234908 15.389150  5.171982 20.390825 11.365891  5.377197  5.289994\n [827]  8.019107 12.923733  6.289761  4.747143 11.767389  8.075054  7.589202\n [834]  7.063260  7.810713  7.875881  6.130386 10.039928 23.316898  7.935942\n [841]  6.674351  3.131728 16.350651  5.097724  5.988275 14.234798 12.825203\n [848]  7.611399 37.671219  4.817731  5.256682  7.979159 17.991390 21.070383\n [855]  7.529323 16.710610  7.649365  6.302058  9.598788 12.846073 13.906178\n [862]  5.188373 25.243174 22.341673  6.530109 10.424809  5.226890  3.973538\n [869]  3.990799 13.202370  9.261346 14.617998 16.655459  7.951494  5.906118\n [876]  4.769386  8.912543 15.912557  3.118072 14.157836  6.209171  9.392903\n [883]  4.554953 13.466440  3.797291  8.291070 10.196705 10.299693 22.681143\n [890] 15.534273  7.670050  6.763429 10.566136 26.770649  6.446907 12.851007\n [897]  8.038916  5.252278 10.528966  4.640688 11.907272  8.239203 13.426491\n [904] 12.509110 11.085973  4.344476  7.568144 21.025616  8.501848 16.664800\n [911]  9.309018  6.923763  7.267968  5.632527  9.304927 10.994524  3.350223\n [918] 10.126452  7.169008  2.926619  9.687305  5.026705  9.950606 10.244122\n [925]  8.669018  9.389935 12.937114  9.959240  5.039959 12.693318 11.938860\n [932]  5.696850  8.662153 10.259350 11.582157  8.450874  4.766270  3.424745\n [939] 13.851277 12.794559 20.900590 12.841001 14.012461 15.627804 30.236454\n [946] 14.350391  5.393277  9.856223  6.522718  9.223314  4.711810  8.786792\n [953] 10.369246  8.506418 11.455688  6.973830  5.460132 14.463669  5.608424\n [960] 18.667199  7.510966  8.206467  8.737598 19.988102  6.779640 26.523068\n [967]  7.889209  8.381606  6.199563 30.781468  5.955071  9.740918 17.915503\n [974] 19.661966 11.802730  9.512840 19.829487 12.278193 21.192155 15.600610\n [981]  6.838013 19.593403 11.454369  4.072621 12.941464  6.992606 15.983477\n [988]  7.864295  9.085529 12.672088  5.475907 31.787008  6.200947  7.029389\n [995]  6.273913 10.351483 10.609119  7.566718  7.227250 13.763964\n```\n:::\n\n```{.r .cell-code}\nmu1 <- log(10); sigma1= sqrt(theta^2)\nmu2 <- log(10) - .5*theta^2; sigma2= sqrt(theta^2)\n\n# ito's integral\nappdensI <- dsde1d(mod1, at = 1) # conditional density estimation at particular time\n# strat integral\nappdensS <- dsde1d(mod2, at = 1)\nplot(appdensI, dens = function(x) dlnorm(x, meanlog = mu1, sdlog = sigma1))\n```\n\n::: {.cell-output-display}\n![](stochastic_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n\n```{.r .cell-code}\nplot(appdensS, dens = function(x) dlnorm(x, meanlog = mu2, sdlog = sigma2))\n```\n\n::: {.cell-output-display}\n![](stochastic_files/figure-html/unnamed-chunk-14-2.png){width=672}\n:::\n:::\n\n::: {.cell hash='stochastic_cache/html/unnamed-chunk-15_0d5202d3f465cac0745f4de42cd5eaa7'}\n\n```{.r .cell-code}\nplot(mod1) # show the plot values\nlines(time(mod1),apply(mod1$X,1,mean),col=2,lwd=2)\nlines(time(mod1),apply(mod1$X,1,bconfint,level=0.95)[1,],col=4,lwd=2)\nlines(time(mod1),apply(mod1$X,1,bconfint,level=0.95)[2,],col=4,lwd=2)\nlegend(\"topleft\",c(\"mean path\",paste(\"bound of\", 95,\"% confidence\")),inset = .01,col=c(2,4),lwd=2,cex=0.8)\n```\n\n::: {.cell-output-display}\n![](stochastic_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\nIn two dimensions, vector of drift and diffusion\n\n$$\n\\begin{aligned}\ndX = -\\frac{1}{\\mu} Xdt + \\sqrt{\\sigma} dW, \\quad X_0 = x_0\n\\end{aligned}\n$$\n\n\n::: {.cell hash='stochastic_cache/html/unnamed-chunk-16_101bc7470a057dd4ee19be5bd3e80e91'}\n\n```{.r .cell-code}\nx0=5;y0=0\nmu=3;sigma=0.5\nfx <- expression(-(x/mu),x)  \ngx <- expression(sqrt(sigma),0)\nmod2d <- snssde2d(drift=fx,diffusion=gx,Dt=0.01,M=1000,x0=c(x0,y0),method=\"smilstein\")\nmod2d\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nItô Sde 2D:\n\t| dX(t) = -(X(t)/mu) * dt + sqrt(sigma) * dW1(t)\n\t| dY(t) = X(t) * dt + 0 * dW2(t)\nMethod:\n\t| Second-order Milstein scheme\nSummary:\n\t| Size of process\t| N  = 1001.\n\t| Number of simulation\t| M  = 1000.\n\t| Initial values\t| (x0,y0) = (5,0).\n\t| Time of process\t| t in [0,10].\n\t| Discretization\t| Dt = 0.01.\n```\n:::\n:::\n\n::: {.cell hash='stochastic_cache/html/unnamed-chunk-17_de6fb2ca9b5017a182d8eb4c1b982b00'}\n\n```{.r .cell-code}\nsummary(mod2d, at = 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n\tMonte-Carlo Statistics for (X(t),Y(t)) at time t = 10\n                          X             Y\nMean              0.2114239  1.473032e+01\nVariance          0.7162004  2.452654e+01\nMedian            0.2211481  1.474951e+01\nMode              0.2740158  1.509543e+01\nFirst quartile   -0.3465095  1.120916e+01\nThird quartile    0.7881960  1.795676e+01\nMinimum          -2.5031512 -1.658424e+00\nMaximum           2.9862385  2.781259e+01\nSkewness         -0.0183102 -1.056010e-02\nKurtosis          3.1056085  2.905123e+00\nCoef-variation    4.0027928  3.362064e-01\n3th-order moment -0.0110980 -1.282691e+00\n4th-order moment  1.5930000  1.747580e+03\n5th-order moment  0.1742750 -9.018843e+02\n6th-order moment  5.9779595  1.942875e+05\n```\n:::\n:::\n\n::: {.cell hash='stochastic_cache/html/unnamed-chunk-18_392683b52df5f4e9a33c1ef780e71937'}\n\n```{.r .cell-code}\n## in time\nplot(mod2d)\n```\n\n::: {.cell-output-display}\n![](stochastic_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n\n```{.r .cell-code}\n## in plane (O,X,Y)\nplot2d(mod2d,type=\"n\") \npoints2d(mod2d,col=rgb(0,100,0,50,maxColorValue=255), pch=16)\n```\n\n::: {.cell-output-display}\n![](stochastic_files/figure-html/unnamed-chunk-18-2.png){width=672}\n:::\n:::\n\n\n## Guassian Markov Random Field\n\nGMRF is a generalization of the markov chians. I want to know what data actually looks like when simulated from a GMRF. We start with a line graph, which is just a standard random walk\n\n### Random Walk\n\n\n::: {.cell hash='stochastic_cache/html/unnamed-chunk-19_7593a5478baae7286a6ebce16ca5ebb2'}\n\n```{.r .cell-code}\nn <- 20 # 20 obs\nN <- 100 # nodes\n\n\n#' Random Walk\n#'\n#' @param N number of nodes\n#'\n#' @return\n#' @export\n#'\n#' @examples\nrandomwalk <- function(nodes = 10, y0 = 0, drift = 0, stddev = 1) {\n  y0 + cumsum(rnorm(nodes, mean = drift, sd = stddev))\n}\n\nset.seed(1)\nrw_mat <- replicate(1000,\n          randomwalk(10)) # 6 rows, 1000 samples\n\nrw_cov <- rw_mat %>% t() %>% cov() \nrw_prec <- rw_cov %>% solve()\nimage(rw_prec)\n```\n\n::: {.cell-output-display}\n![](stochastic_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n::: {.cell hash='stochastic_cache/html/unnamed-chunk-20_fe014b549939b4f3ae3ac2026ecc1575'}\n\n```{.r .cell-code}\n# can try to use glasso to estimate sparse patterns in the covariance matrix\nrw_glasso <- glasso(rw_cov, rho = .02, nobs = 1000)\n\nrw_glassopath <- glassopath(rw_cov, rholist = seq(.01, .40, .01))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nm\n[1] 1\nm\n[1] 2\nm\n[1] 3\nm\n[1] 4\nm\n[1] 5\nm\n[1] 6\nm\n[1] 7\nm\n[1] 8\nm\n[1] 9\nm\n[1] 10\nm\n[1] 1\nm\n[1] 2\nm\n[1] 3\nm\n[1] 4\nm\n[1] 5\nm\n[1] 6\nm\n[1] 7\nm\n[1] 8\nm\n[1] 9\nm\n[1] 10\nm\n[1] 1\nm\n[1] 2\nm\n[1] 3\nm\n[1] 4\nm\n[1] 5\nm\n[1] 6\nm\n[1] 7\nm\n[1] 8\nm\n[1] 9\nm\n[1] 10\nrho=\n[1] 0.4\nrho=\n[1] 0.39\nrho=\n[1] 0.38\nrho=\n[1] 0.37\nrho=\n[1] 0.36\nrho=\n[1] 0.35\nrho=\n[1] 0.34\nrho=\n[1] 0.33\nrho=\n[1] 0.32\nrho=\n[1] 0.31\nrho=\n[1] 0.3\nrho=\n[1] 0.29\nrho=\n[1] 0.28\nrho=\n[1] 0.27\nrho=\n[1] 0.26\nrho=\n[1] 0.25\nrho=\n[1] 0.24\nrho=\n[1] 0.23\nrho=\n[1] 0.22\nrho=\n[1] 0.21\nrho=\n[1] 0.2\nrho=\n[1] 0.19\nrho=\n[1] 0.18\nrho=\n[1] 0.17\nrho=\n[1] 0.16\nrho=\n[1] 0.15\nrho=\n[1] 0.14\nrho=\n[1] 0.13\nrho=\n[1] 0.12\nrho=\n[1] 0.11\nrho=\n[1] 0.1\nrho=\n[1] 0.09\nrho=\n[1] 0.08\nrho=\n[1] 0.07\nrho=\n[1] 0.06\nrho=\n[1] 0.05\nrho=\n[1] 0.04\nrho=\n[1] 0.03\nrho=\n[1] 0.02\nrho=\n[1] 0.01\n```\n:::\n\n```{.r .cell-code}\nrw_glassopath$wi[,,6]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n             [,1]        [,2]        [,3]         [,4]        [,5]         [,6]\n [1,]  1.53363033 -0.59705922 -0.05045755  0.000000000 -0.05281481  0.000000000\n [2,] -0.59704118  1.46328031 -0.66740241 -0.062748027 -0.01166860  0.000000000\n [3,] -0.05045859 -0.66736724  1.48804455 -0.709396648 -0.01840336  0.000000000\n [4,]  0.00000000 -0.06272291 -0.70930973  1.502769843 -0.64832439 -0.104003565\n [5,] -0.05271855 -0.01139892 -0.01848738 -0.648268462  1.39557882 -0.614267466\n [6,]  0.00000000  0.00000000  0.00000000 -0.104181741 -0.61433940  1.450875970\n [7,]  0.00000000  0.00000000  0.00000000  0.000000000  0.00000000 -0.685011604\n [8,]  0.00000000  0.00000000  0.00000000 -0.006829119 -0.03745143 -0.040873008\n [9,]  0.00000000 -0.00267496  0.00000000  0.000000000 -0.02218277 -0.012819793\n[10,]  0.00000000  0.00000000  0.00000000  0.000000000  0.00000000 -0.005073061\n             [,7]         [,8]         [,9]        [,10]\n [1,]  0.00000000  0.000000000  0.000000000  0.000000000\n [2,]  0.00000000  0.000000000 -0.002589899  0.000000000\n [3,]  0.00000000  0.000000000  0.000000000  0.000000000\n [4,]  0.00000000 -0.006867342  0.000000000  0.000000000\n [5,]  0.00000000 -0.037544676 -0.022236583  0.000000000\n [6,] -0.68516608 -0.040524630 -0.012875666 -0.005038421\n [7,]  1.44064932 -0.678296252 -0.049116046  0.000000000\n [8,] -0.67798966  1.509124167 -0.676270096 -0.090260579\n [9,] -0.04922243 -0.676158135  1.480116539 -0.719604508\n[10,]  0.00000000 -0.090276515 -0.719623596  0.810028387\n```\n:::\n\n```{.r .cell-code}\napply(rw_glassopath$wi, 3, as_function(~sum(.x != 0))) # why does the number of elements increase then decrease? behavior is curious\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 80 70 64 64 60 58 58 60 60 62 62 64 68 68 68 68 70 70 70 70 70 70 72 72 72\n[26] 74 74 74 74 74 74 76 78 78 78 78 78 78 78 80\n```\n:::\n:::\n\n::: {.cell hash='stochastic_cache/html/unnamed-chunk-21_4ebf867c4acf965fdcd439cac8a0190b'}\n\n```{.r .cell-code}\nset.seed(1)\ngaus <- matrix(rnorm(50*20), ncol = 20)\ngaus_cov <- var(gaus)\ngaus_prec <- gaus_cov %>% solve()\ngaus_prec %>% Matrix() %>% image() # has a diagonal structure\n```\n\n::: {.cell-output-display}\n![](stochastic_files/figure-html/unnamed-chunk-21-1.png){width=672}\n:::\n\n```{.r .cell-code}\ngaus_glasso <- glasso(gaus_cov, rho = .03, nobs = 50)\n\ngaus_glassopath <- glassopath(gaus_cov, rho = seq(.01, .7, .01))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nrho=\n[1] 0.7\nrho=\n[1] 0.69\nrho=\n[1] 0.68\nrho=\n[1] 0.67\nrho=\n[1] 0.66\nrho=\n[1] 0.65\nrho=\n[1] 0.64\nrho=\n[1] 0.63\nrho=\n[1] 0.62\nrho=\n[1] 0.61\nrho=\n[1] 0.6\nrho=\n[1] 0.59\nrho=\n[1] 0.58\nrho=\n[1] 0.57\nrho=\n[1] 0.56\nrho=\n[1] 0.55\nrho=\n[1] 0.54\nrho=\n[1] 0.53\nrho=\n[1] 0.52\nrho=\n[1] 0.51\nrho=\n[1] 0.5\nrho=\n[1] 0.49\nrho=\n[1] 0.48\nrho=\n[1] 0.47\nrho=\n[1] 0.46\nrho=\n[1] 0.45\nrho=\n[1] 0.44\nrho=\n[1] 0.43\nrho=\n[1] 0.42\nrho=\n[1] 0.41\nrho=\n[1] 0.4\nrho=\n[1] 0.39\nrho=\n[1] 0.38\nrho=\n[1] 0.37\nrho=\n[1] 0.36\nrho=\n[1] 0.35\nrho=\n[1] 0.34\nrho=\n[1] 0.33\nrho=\n[1] 0.32\nrho=\n[1] 0.31\nrho=\n[1] 0.3\nrho=\n[1] 0.29\nrho=\n[1] 0.28\nrho=\n[1] 0.27\nrho=\n[1] 0.26\nrho=\n[1] 0.25\nrho=\n[1] 0.24\nrho=\n[1] 0.23\nrho=\n[1] 0.22\nrho=\n[1] 0.21\nrho=\n[1] 0.2\nrho=\n[1] 0.19\nrho=\n[1] 0.18\nrho=\n[1] 0.17\nrho=\n[1] 0.16\nrho=\n[1] 0.15\nrho=\n[1] 0.14\nrho=\n[1] 0.13\nrho=\n[1] 0.12\nrho=\n[1] 0.11\nrho=\n[1] 0.1\nrho=\n[1] 0.09\nrho=\n[1] 0.08\nrho=\n[1] 0.07\nrho=\n[1] 0.06\nrho=\n[1] 0.05\nrho=\n[1] 0.04\nrho=\n[1] 0.03\nrho=\n[1] 0.02\nrho=\n[1] 0.01\n```\n:::\n\n```{.r .cell-code}\n# count number of non-zero entries\napply(gaus_glassopath$wi, 3, as_function(~sum(.x != 0)))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 366 346 326 306 276 254 238 222 208 192 180 166 158 142 126 112 104  94  88\n[20]  76  66  62  56  48  46  42  32  26  26  24  24  24  24  24  24  22  22  22\n[39]  20  20  20  20  20  20  20  20  20  20  20  20  20  20  20  20  20  20  20\n[58]  20  20  20  20  20  20  20  20  20  20  20  20  20\n```\n:::\n\n```{.r .cell-code}\ngaus_glassopath$wi[,,60] %>% image() # sparsity pattern is correct but not the scale...\n```\n\n::: {.cell-output-display}\n![](stochastic_files/figure-html/unnamed-chunk-21-2.png){width=672}\n:::\n:::\n\n\n\nSampling from multivariate normal distribution, sparse precision matrix, we use `sparseMVN`\n\n\n\n\n\n\n## Reaction Diffusion Equations\n\nThese are non-linear differential equations, and a system of them. We can start describing the reactions of SIR model as sets of nonlinear differential equations. There are a number of famous examples of these, we'll study the Grey-Scott system, then the SIR system, and hopefully we'll see the reaction diffusion nonlinearity around the boundaries of the different stable sets.\n\n### Grey-Scott Model\n\nA really cool web simulation of the phenomena I want to recreate can be found by [Karl Sims, Reaction Diffusion Tutorial](https://www.karlsims.com/rd.html). Luckily, someone else has already implemented a version of this, and we'll just borrow [their code (Fronkonstin)](https://github.com/aschinchon/reaction-diffusion).\n\n![](https://thumbs.gfycat.com/SeveralIncomparableChupacabra-size_restricted.gif){width=\"296\"}\n\nThe Grey-Scott Model describes the following irreversible, reactions of three compound $U, V, P$ and $P$ is an inert product.\n\n$$\n\\begin{align*}\nU + 2V &\\rightarrow 3V \\\\\nV &\\rightarrow P\n\\end{align*}\n$$\n\nWe will use the simulation parameters from @pearsonComplexPatternsSimple1993, in particular, the equations that result from this reaction diffusion is\n\n$$\n\\frac{\\partial U}{\\partial t} = D_u \\nabla^2U - UV^2 + F(1 - U) \\\\\n\\frac{\\partial V}{\\partial t} = D_v \\nabla^2V + UV^2 - (F + k)V\n$$\n\n-   $D_u = 2 \\times 10^{-5}$\n\n-   $D_v = 10^{-5}$\n\n-   periodic boundary condition\n\n-   $F$ and $k$ are known as the feed and kill rates of the reactants. since concentration ranges between 0 and 1, the reaction term in the first equation is positive, and then F controls how much of reactant $U$ is being introduced.\n\n\n\n\n\n\n::: {.cell hash='stochastic_cache/html/unnamed-chunk-25_2e1bf801b9a5cff3b47f98d16fe781a3'}\n\n```{.r .cell-code}\ngray_scott <- function(U0 = NULL, V0 = NULL,\n                       feed_rate = 0.0545,\n                       kill_rate = 0.062,\n                       N = 256,\n                       tN = 2000,\n                       D.u = 1,\n                       D.v = .5,\n                       save_frame_freq = 20,\n                       video_file = \"gray_scott.mp4\",\n                       pic_dir = NULL,\n                       init_strategy = c(\"random\"),\n                       seed = 1,\n                       ...) {\n  set.seed(seed)\n  pct <- proc.time()\n  init_strategy <- match.arg(init_strategy)\n  if (missing(U0) | missing(V0)) {\n    #TODO: implement different initialization strategies for different patterns\n    U0 <- matrix(1, nrow = N, ncol = N)\n    V0 <- matrix(0, nrow = N, ncol = N)\n    V0[sample(N^2, ceiling(N^2 / 20))] <- 1 # 10% of cells\n    } else if (!all(c(dim(U0), dim(V0)) == N)) {\n      rlang::abort(\"Initial Matrix must be a grid with dimension N\")\n    }\n  \n  U <- U0\n  V <- V0\n  # 9 point stencil for Laplacian\n  # yuvj420p pix format used: https://superuser.com/questions/1273920/deprecated-pixel-format-used-make-sure-you-did-set-range-correctly\n  L <- matrix(c(0.05, 0.2, 0.05, \n                0.2,  -1, 0.2,\n                0.05, 0.2, 0.05), nrow = 3)\n  \n  \n  if (missing(pic_dir))\n    pic_dir <- tempdir() \n  else \n    pic_dir <- fs::dir_create(fs::path_wd(pic_dir))\n\n  # clean directory  \n  if (length(Sys.glob(fs::path(pic_dir, \"*.jpg\"))) > 0 ) {\n    rlang::abort(sprintf(\"%s not empty, please clean out *.jpg files to prevent overwriting!\", pic_dir))\n  }\n\n  jpeg_file <- fs::path(pic_dir, sprintf(\"plot%06d.jpg\", 0))\n  jpeg(jpeg_file)\n      # setup base plot graphical parameters\n      par(bty = \"n\", oma = rep(0, 4), mar = rep(0, 4))\n      plot(raster(V0),\n           axes = F, bty = \"n\", frame.plot = F,\n           interpolate = F,\n           breaks = hist(V0, breaks = 256, plot = F)$breaks,\n           col = hcl.colors(256,  palette = \"ag_sunset\"),\n           legend = FALSE)\n      \n      dev.off()\n  \n  p <- progressr::progressor(tN / save_frame_freq)\n  for (i in 1:tN) {\n    dU <- D.u * filter2(U, L) - U * V^2 + feed_rate * (1 - U)\n    dV <- D.v * filter2(V, L) + U * V^2 - (feed_rate + kill_rate) * V\n    U <- U + dU\n    V <- V + dV\n    # save frame in temp folder\n    if (i %% save_frame_freq == 0) {\n      p(message = sprintf(\"Timestep: %g\", i))\n      jpeg_file <- fs::path(pic_dir,\n                            sprintf(\"plot%06d.jpg\", i))\n      jpeg(jpeg_file)\n      # setup base plot graphical parameters\n      par(bty = \"n\", oma = rep(0, 4), mar = rep(0, 4))\n      plot(raster(V),\n           axes = F, bty = \"n\", frame.plot = F,\n           interpolate = T,\n           breaks = hist(V, breaks = 256, plot = F)$breaks,\n           col = hcl.colors(256,  palette = \"ag_sunset\"),\n           legend = FALSE)\n      dev.off()\n    }\n  }\n  \n  # create video directory\n  fs::dir_create(fs::path_wd(fs::path_dir(video_file)))\n  \n  #TODO: check if ffmpeg available on system?\n  ffmpeg_cmd <- sprintf('ffmpeg -y -f image2 -pattern_type glob -i \"%s/*.jpg\" -framerate 60 -c:v libx264 -crf 20 -filter:v \"format=yuvj420p\" %s', pic_dir, fs::path_wd(video_file))\n  # run ffmpeg command\n  system(ffmpeg_cmd)\n  cat(paste0(\"Running command: \", ffmpeg_cmd, \"\\n\"))\n  proc.time() - pct # elapsed wall time\n}\n# relative to this script (when running commands in notebook)\nwith_progress(\n  gray_scott(video_file = \"vid/gray_scott.mp4\", pic_dir = \"gray_pic\"), handlers = handlers(\"progress\")) # for text updates\n```\n:::\n\n\n<figure class=\"figure\">\n\n<video loop autoplay >\n\n<source src=\"vid/gray_scott.mp4\" type=\"video/mp4\">\n\n</video>\n\n<figcaption>Gray Scott Reaction Diffusion, $f=.0545, k=.062$</figcaption>\n\n</figure>\n\n\n\n\n\n### SIR Diffusion\n\n\n::: {.cell hash='stochastic_cache/html/unnamed-chunk-27_7f6efdd647d59d3fe43ed4c96c0e962a'}\n\n:::\n\n\n\n\nhere's we're trying to upsample the values that come out of the\n\nThe SIR image has a slightly different quality to it in that the lines around the image are thinner\n\n<figure class=\"figure\">\n\n<video loop autoplay >\n\n<source src=\"vid/sir_diffusion.mp4\" type=\"video/mp4\">\n\n</video>\n\n<figcaption>SIR Reaction Diffusion, $f=.0545, k=.062$</figcaption>\n\n</figure>\n\n### SIS system\n\nI'm curious if the SIS system without vital dynamics will show any interesting patterns. We know there must be an absorbing state, but this system can also reach an endemic state based on the reproduction number. If we add diffusion into the system we should get interesting results, at the very least some cool videos.\n\n### Brusselator\n\n### Lorentz Attractor\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}