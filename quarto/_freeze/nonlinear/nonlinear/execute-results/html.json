{
  "hash": "4dc8f9d9d27931a4207802daeb9838b2",
  "result": {
    "markdown": "---\ntitle: \"Nonlinear\"\nauthor: \"Michael Liou\"\n---\n\n::: {.cell hash='nonlinear_cache/html/unnamed-chunk-1_fb6237ad213b8a33c45ce14fe7c52bbb'}\n\n```{.r .cell-code  code-summary=\"Libraries and Setup\"}\nlibrary(drc)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: MASS\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\n'drc' has been loaded.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nPlease cite R and 'drc' if used for a publication,\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nfor references type 'citation()' and 'citation('drc')'.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'drc'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:stats':\n\n    gaussian, getInitial\n```\n:::\n\n```{.r .cell-code  code-summary=\"Libraries and Setup\"}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.1 ──\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n✔ ggplot2 3.3.6     ✔ purrr   0.3.4\n✔ tibble  3.1.8     ✔ dplyr   1.0.9\n✔ tidyr   1.2.0     ✔ stringr 1.4.0\n✔ readr   2.1.2     ✔ forcats 0.5.1\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n✖ dplyr::select() masks MASS::select()\n```\n:::\n:::\n\n\n## Standard Nonlinear Models\n\nUse nls mostly, but it can be quite clunky to use. Consider more robust tool\n\n## Dose Response Curves\n\nDose Response curves are popular in the physical sciences and many biological methods also require some form of calibration.\n\nFor example, spectroscopy is common to determine the concentration of a particular analyte in a solution. This involves shining a light onto the chemical.\n\n- transmittance : $T = I / I_0$ light intensity measured by the initial light intensity supplied\n- absorbance : $\\log T$ the amount of light absorbed, the signal\n\nThe models that you can fit are numerous\n\n- Log Logistic\n- Weibull\n\nWe follow along [a blog](http://www.darrenkoppel.com/2020/09/04/dose-response-modelling-and-model-selection-in-r/) for this section.\n\n`ryegrass` is the dataset here, which just has 2 variables\n\n\n::: {.cell hash='nonlinear_cache/html/unnamed-chunk-2_0774ee1fa8561d5abbb0b7a24252c843'}\n\n```{.r .cell-code}\nryegrass |> ggplot(aes(x = conc, y = rootl)) +\n  geom_point() + \n  geom_smooth(se = FALSE, color = \"red\", size = .5, method = \"loess\", formula = y~x)\n```\n\n::: {.cell-output-display}\n![](nonlinear_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n\nThe most popular model to fit to dose responses with a log logistic function\n\n\n::: {.cell hash='nonlinear_cache/html/unnamed-chunk-3_e0c7d44c12a564a7e3870c29c525b0a9'}\n\n```{.r .cell-code}\nmod <- drm(rootl~conc, data = ryegrass, fct=LL.4(names = c(\"Slope\", \"Lower Limit\", \"Upper Limit\", \"ED50\")))\nplot(mod, type = \"all\") # average\n```\n\n::: {.cell-output-display}\n![](nonlinear_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n\n```{.r .cell-code}\nED(mod, c(10, 20, 50), interval = \"delta\") # effective dose, with delta method intervals\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nEstimated effective doses\n\n       Estimate Std. Error   Lower   Upper\ne:1:10  1.46371    0.18677 1.07411 1.85330\ne:1:20  1.92109    0.17774 1.55032 2.29186\ne:1:50  3.05795    0.18573 2.67053 3.44538\n```\n:::\n:::\n\nIf we want to work on a percentage scale 0-100, we can transform our data and then fix some parameters of the log logistic function that's being fit.\n\n\n::: {.cell hash='nonlinear_cache/html/unnamed-chunk-4_45f3ee5e7ccaef6cedce9f3a60c84748'}\n\n```{.r .cell-code}\nmean_rootl_control <- mean(ryegrass$rootl[ryegrass$conc == 0])\nryegrass_relative <- ryegrass |> mutate(per_response = rootl/ mean_rootl_control * 100)\nmod_fixed <- drm(per_response~conc, data = ryegrass_relative,\n                 fct = LL.3(fixed = c(NA, 100, NA),\n                            names = c(\"Slope\", \"Upper Limit\", \"ED50\"))) # LL3 lower bound is 0, and we fix upper bound to be 100\nplot(mod_fixed, main = \"LL.3(fixed = c(NA, 100, NA))\", type = \"all\")\n```\n\n::: {.cell-output-display}\n![](nonlinear_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\nWe use `mselect` to choose a model from a list of models. `maED` to do model averaging\n\n\n::: {.cell hash='nonlinear_cache/html/unnamed-chunk-5_66227f0576cf93c0a5880674004da9c6'}\n\n```{.r .cell-code}\n# Model selection\nmselect(mod, fctList = list(W1.3(fixed=c(NA, 100, NA)),W1.4(), W2.3(fixed=c(NA, 100, NA)), W2.4(),  LL.4()),linreg=TRUE) |> \n  suppressWarnings() # not sure why warnings are produced \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n         logLik        IC  Lack of fit    Res var\nW2.4  -15.91352  41.82703 9.450713e-01  0.2646283\nLL.4  -16.15514  42.31029 8.664830e-01  0.2700107\nLL.4  -16.15514  42.31029 8.664830e-01  0.2700107\nW1.4  -17.46720  44.93439 4.505676e-01  0.3012075\nCubic -25.53428  61.06856           NA  0.5899609\nQuad  -35.11558  78.23116           NA  1.2485122\nLin   -50.47554 106.95109           NA  4.2863247\nW1.3  -74.48596 154.97191 1.808628e-17 31.6993835\nW2.3  -74.49140 154.98280 1.801677e-17 31.7137648\n```\n:::\n\n```{.r .cell-code}\n# here the interpretation is we can calculate effective dose for 10 and 50, using the averages of all the models included in the list\nmaED(mod, \n     list(W2.4(),\n          LL.4(),\n          LL.3(fixed=c(NA, 100, NA)),\n          W1.4()),\n     c(10, 50), \n     interval=\"kang\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n            ED10        ED50       Weight\nLL.4    1.463706    3.057955 2.822797e-01\nW2.4    1.628278    2.996913 3.594322e-01\nLL.4    1.463706    3.057955 2.822797e-01\nLL.3 2218.795584 2239.859777 9.641731e-26\nW1.4    1.405979    3.088964 7.600843e-02\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n       Estimate    Lower    Upper\ne:1:10 1.518470 1.153434 1.883507\ne:1:50 3.038371 2.644522 3.432220\n```\n:::\n:::\n\n\n\n## Nonlinear Mixed Models\n\nThe package landscape in nonlinear mixed models is\n\n### Exploring RxODE\n\nRxODE is a package that simulates nonlinear mixed models with ODE language\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}