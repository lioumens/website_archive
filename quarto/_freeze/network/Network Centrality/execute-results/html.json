{
  "hash": "4ce7f820ea90622b9913b0060b2a7d0d",
  "result": {
    "markdown": "---\ntitle: \"Network Centrality\"\nauthor: \"Michael Liou\"\nformat: html\neditor: visual\n---\n\n::: {.cell hash='Network-Centrality_cache/html/setup_09fde8ee451eba9756b7dce70b54426c'}\n\n```{.r .cell-code}\nlibrary(igraph)\nlibrary(ggraph)\nlibrary(tidygraph)\nlibrary(netrankr)\n\nlibrary(ergm)\n```\n:::\n\n\n# Introduction\n\nSeveral types of measuring centrality\n\n1. Degree\n\nCounting the number of in/out edges. summing by weight\n\n2. Eigenvalue\n\nCaptures the idea that being connected to someone else important means that you yourself are important.\n\n3. Katz\n\n4. PageRank\n\n\n# Network Fixtures\n\n\n::: {.cell hash='Network-Centrality_cache/html/unnamed-chunk-2_6650be509c1e3ae52cd8967ea6a40b80'}\n\n```{.r .cell-code}\nset.seed(1)\n# ER random graph, 20 nodes, average 5/20 connections, directed\ng_uni <- sample_gnp(20, 5/20, directed=TRUE)\n\n# Simple 1,1, 2, 3 graph\ng_simple_adj_matrix <- matrix(c(0, 1, 1, 1,\n                     1, 0, 0, 1,\n                     1, 0, 0, 0,\n                     1, 1, 0, 0),\n                     nrow = 4, ncol = 4)\n\ng_simple <- graph_from_adjacency_matrix(g_simple_adj_matrix, mode = \"undirected\")\n# g_simple %>% set_vertex_attr(\"name\", value = letters[1:4]) # label with alphabet\n\n# ER random graph, 20 nodes, average 5/20, undirected\n\ng_uni_bi <- sample_gnp(20, 5/20, directed=TRUE)\n\n\n# Simple Directed graph, acyclic\ng_simple_dir_adj_matrix <- matrix(c(0, 1, 1, 0, 1, 0, 0, 0,\n                                    0, 0, 1, 1, 0, 0, 0, 0,\n                                    0, 0, 0, 0, 0, 1, 0, 0,\n                                    0, 0, 0, 0, 1, 0, 1, 0,\n                                    0, 0, 0, 0, 0, 0, 0, 0,\n                                    0, 0, 0, 0, 0, 0, 0, 0,\n                                    0, 0, 0, 0, 0, 0, 0, 0,\n                                    0, 0, 0, 0, 0, 1, 0, 0),\n                                  nrow = 8,\n                                  ncol = 8,\n                                  byrow = TRUE)\n\ng_simple_dir <- graph_from_adjacency_matrix(g_simple_dir_adj_matrix, mode = \"directed\")\n```\n:::\n\n\n\n# Eigenvalue centrality\n\n\n::: {.cell hash='Network-Centrality_cache/html/unnamed-chunk-3_6c47726d15c7c423317276dd855ed6a8'}\n\n```{.r .cell-code}\n# The graph we look at\nggraph(g_simple, layout = \"kk\") +\n  geom_edge_fan() +\n  geom_node_label(aes(label = 1:4))\n```\n\n::: {.cell-output-display}\n![](Network-Centrality_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n::: {.cell hash='Network-Centrality_cache/html/unnamed-chunk-4_631d333773e396de678f14469151cf0b'}\n\n```{.r .cell-code}\n# Eigenvector centrality through igraph\ncent_eig_igraph <- eigen_centrality(g_simple)$vector\n# Through eigenvector decomp\ncent_eig_manual <- eigen(g_simple_adj_matrix)$vectors[,1] / eigen(g_simple_adj_matrix)$vectors[1,1]\n\n# They are the same!\ncbind(\n  cent_eig_igraph, # Eigencentrality\n  cent_eig_manual # eig centrality calculation\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     cent_eig_igraph cent_eig_manual\n[1,]       1.0000000       1.0000000\n[2,]       0.8546377       0.8546377\n[3,]       0.4608111       0.4608111\n[4,]       0.8546377       0.8546377\n```\n:::\n:::\n\n::: {.cell hash='Network-Centrality_cache/html/unnamed-chunk-5_e8baf3d805bb4c93948b216b75cb4986'}\n\n```{.r .cell-code}\n# Note how\neigen_centrality\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nfunction (graph, directed = FALSE, scale = TRUE, weights = NULL, \n    options = arpack_defaults) \n{\n    if (!is_igraph(graph)) {\n        stop(\"Not a graph object\")\n    }\n    directed <- as.logical(directed)\n    scale <- as.logical(scale)\n    if (is.null(weights) && \"weight\" %in% edge_attr_names(graph)) {\n        weights <- E(graph)$weight\n    }\n    if (!is.null(weights) && any(!is.na(weights))) {\n        weights <- as.numeric(weights)\n    }\n    else {\n        weights <- NULL\n    }\n    options.tmp <- arpack_defaults\n    options.tmp[names(options)] <- options\n    options <- options.tmp\n    on.exit(.Call(C_R_igraph_finalizer))\n    res <- .Call(C_R_igraph_eigenvector_centrality, graph, directed, \n        scale, weights, options)\n    if (igraph_opt(\"add.vertex.names\") && is_named(graph)) {\n        names(res$vector) <- vertex_attr(graph, \"name\", V(graph))\n    }\n    res\n}\n<bytecode: 0x7fc9774e06b8>\n<environment: namespace:igraph>\n```\n:::\n\n```{.r .cell-code}\neigen_centrality(g_simple_dir)$vector\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.9767991 1.0000000 0.9081894 0.7377802 0.6537287 0.4051718 0.2812982\n[8] 0.1544825\n```\n:::\n\n```{.r .cell-code}\neigen(g_simple_dir_adj_matrix)$vectors[,1] / eigen(g_simple_adj_matrix)$vectors[1,1]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1.63498 0.00000 0.00000 0.00000 0.00000 0.00000 0.00000 0.00000\n```\n:::\n:::\n\n\n## Katz Centrality\n\n\n::: {.cell hash='Network-Centrality_cache/html/unnamed-chunk-6_eab27b682adee7395d02e7de5af6889f'}\n\n```{.r .cell-code}\nlength(V(g_simple_dir))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 8\n```\n:::\n\n```{.r .cell-code}\nggraph(g_simple_dir, layout = \"kk\") +\n  geom_edge_fan(arrow = arrow(length = unit(4, \"mm\")),\n                end_cap = circle(3, \"mm\")) +\n  geom_node_label(aes(label = 1:length(V(g_simple_dir))))\n```\n\n::: {.cell-output-display}\n![](Network-Centrality_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n::: {.cell hash='Network-Centrality_cache/html/unnamed-chunk-7_3c9fe2353b3c76af0850297a8988f853'}\n\n```{.r .cell-code}\n# Calculating Katz Centrality with tidygraph (rank ordered?)\n# Only undirected?\nas_tbl_graph(g_simple) %>% \n  mutate(centrality = centrality_katz())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tbl_graph: 4 nodes and 4 edges\n#\n# An undirected simple graph with 1 component\n#\n# Node Data: 4 × 1 (active)\n  centrality\n       <dbl>\n1      119. \n2      101. \n3       55.1\n4      101. \n#\n# Edge Data: 4 × 2\n   from    to\n  <int> <int>\n1     1     2\n2     1     3\n3     1     4\n# … with 1 more row\n```\n:::\n:::\n\n::: {.cell hash='Network-Centrality_cache/html/unnamed-chunk-8_e87e78849edca89ef07189ecf1791fce'}\n\n```{.r .cell-code}\nalpha_centrality(g_simple_dir, alpha = 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 2 4 3 5 6 4 1\n```\n:::\n:::\n\n\n## PageRank\n\n\n::: {.cell hash='Network-Centrality_cache/html/unnamed-chunk-9_dd87f84f379631fcc2c462e553428b2e'}\n\n```{.r .cell-code}\npage_rank(g_simple)$vector\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.3667359 0.2459278 0.1414085 0.2459278\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}