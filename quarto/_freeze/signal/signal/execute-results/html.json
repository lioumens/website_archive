{
  "hash": "8e3a7a33076d9d59e780cd7f6358df12",
  "result": {
    "markdown": "---\ntitle: \"Signal Processing\"\nauthor: \"Michael Liou\"\ndate: \"2/4/2022\"\nexecute:\n  cache: true\n---\n\n\n\n\n## Introduction to DSP\n\n[Jeff Doser's R Programming for Data Science](https://www.jeffdoser.com/files/for875/_book/digital-signal-processing.html)\n\n\n::: {.cell hash='signal_cache/html/unnamed-chunk-1_8559891419c126298867c581e75b2197'}\n\n```{.r .cell-code}\nx <- seq(0, 2 * pi, .1)\nstandard <- sin(x)\naltered <- 2 * sin(3 * (x-1)) + 4\ngraphData <- tibble(x, standard, altered)\nggplot(data = graphData, mapping = aes(x = x)) +\n  geom_point(aes(y = standard, color = \"sin(x)\")) +\n  geom_point(aes(y = altered, color = \"2*sin(3 * (x - 1)) + 4\"))\n```\n\n::: {.cell-output-display}\n![](signal_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n:::\n\n::: {.cell hash='signal_cache/html/unnamed-chunk-2_085c8da41f29438a7ccd18b683896270'}\n\n```{.r .cell-code}\nt <- seq(0, 1, len = 100)\n\n# consider the signals\nsig <- sin(2 * pi * t)\nnoisySig <- sin(2*pi*t) + .25 * rnorm(length(t))\nggplot() + \n  geom_line(mapping = aes(t, sig)) +\n  geom_line(mapping = aes(t, noisySig), color = \"red\")\n```\n\n::: {.cell-output-display}\n![](signal_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n::: {.cell hash='signal_cache/html/unnamed-chunk-3_3d6501d255c8d35bec3618ed16b54a3c'}\n\n```{.r .cell-code}\n# butter(filter order, critical frequency 0<w<1)\n# w is like the bandwidth\nbutterFilter <- butter(2, .1)\nrecoveredSig <- signal::filter(butterFilter, noisySig)\nallSignals <- data.frame(t, sig, noisySig, recoveredSig)\n\nallSignals %>% ggplot(aes(t)) +\n  geom_line(aes(y = sig, color = \"Original\")) +\n  geom_line(aes(y = noisySig, color = \"noisy\")) +\n  geom_line(aes(y = recoveredSig, color = \"Recovered\")) +\n  labs(x = \"Time\", y = \"Signal\")\n```\n\n::: {.cell-output-display}\n![](signal_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n## Savitzky-Golay Smoother\n\n\n\n::: {.cell hash='signal_cache/html/unnamed-chunk-4_e8995f5b05450adc46e51af0c885c1dd'}\n\n```{.r .cell-code}\n# discrete signal\nt <- 1:40\nsignal <- c(rep(0,15), rep(10, 10), rep(0, 15))\n```\n:::\n\n::: {.cell hash='signal_cache/html/unnamed-chunk-5_6f1742462cea6b165b55b1dbc3dbf47e'}\n\n```{.r .cell-code}\n# shiny app for interactive\nui <- fluidPage(\n  titlePanel(\"Interactive sgolayfilt\"),\n  sliderInput(\"sg_p\", \"p\",min = 3, max = 10, value = 3),\n  sliderInput(\"sg_n\", \"n\",min = 5, max = 21, value = 7, step = 2),\n  plotOutput(\"plot\")\n)\nserver <- function(input, output){\n  sg <- reactive({sgolayfilt(x, input$sg_p, input$sg_n)})\n  output$plot <- renderPlot({\n    ggplot(mapping = aes(x = t)) + geom_point(aes(y = signal)) +\n      geom_line(aes(y = sg()))\n  }, res = 96)\n  output$product <- renderText({\n    input$sg_p\n  })\n}\n\nshinyApp(ui = ui, server = server)\n```\n:::\n\n::: {.cell hash='signal_cache/html/unnamed-chunk-6_bc473c3569c4bac717ff5dcdcab92729'}\n\n```{.r .cell-code}\nbf <- butter(5,1/3) # butter filter\nsg <- sgolayfilt(x) # sgolayfilt\nplot(sg, type=\"l\")\nlines(filtfilt(rep(1, 5)/5,1,x), col = \"red\") # averaging filter\nlines(filtfilt(bf,x), col = \"blue\")   # butterworth\npoints(x, pch = \"x\")        # original data\n```\n\n::: {.cell-output-display}\n![](signal_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}