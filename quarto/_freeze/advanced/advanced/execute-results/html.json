{
  "hash": "fa2dd3d5f3e089a8ab8373d6b6511021",
  "result": {
    "markdown": "---\ntitle: \"Advanced R\"\n---\n\n\n\n\n\n## Plotting in R\n\nThe interface of plotting is powered by the package `grid`\n\n### grid package\n\n- grobs : graphical object\n- viewports: defining regions where to plot\n\n\n::: {.cell hash='advanced_cache/html/unnamed-chunk-1_5a4d6a3e0099105688849e4a7d61db76'}\n\n```{.r .cell-code}\ngrid.circle(x=seq(0.1, 0.9, length=100), # position\n            y=0.5 + 0.4*sin(seq(0, 2*pi, length=100)),\n            r=abs(0.1*cos(seq(0, 2*pi, length=100))))\n```\n\n::: {.cell-output-display}\n![](advanced_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n:::\n\n\n#### viewports\n\nviewports are \"drawing contexts\", basically defining regions of plotting. \n\n\n::: {.cell hash='advanced_cache/html/unnamed-chunk-2_d19c9baa42fe67acb6e7285cc20ce2a0'}\n\n```{.r .cell-code}\n# An easy first example\ngrid.newpage()\nvp1 <- viewport(x = .5, y = .5,\n                height = .9, width = .9,\n                xscale=c(0,1), yscale=c(0,1))\n\nfor (i in 1:5) {\n pushViewport(vp1)\n grid.rect()\n}\n```\n\n::: {.cell-output-display}\n![](advanced_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# current.vpTree() # check the drawing context\n```\n:::\n\n\nWhat's going on here?!\n\nThe viewports are stored in a tree structure, and the active context of the viewport\n\nExample of recreating a scatter plot\n\n\n::: {.cell hash='advanced_cache/html/unnamed-chunk-3_8f13ae3db95bdda74091d5a04d6f380d'}\n\n```{.r .cell-code}\nx <- runif(10)\ny <- runif(10)\nplot(x, y)\n```\n\n::: {.cell-output-display}\n![](advanced_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\nLooking above, we can decompose the plot into 9 sections,\n\n\n::: {.cell hash='advanced_cache/html/unnamed-chunk-4_61ce87828f2acf16394f2c702172b15c'}\n\n```{.r .cell-code}\n# first layer\nmain_vp <- viewport(layout = grid.layout(3, 3,\n                                         widths = unit(c(5, 1, 2), c(\"lines\", \"null\", \"lines\")),\n                                         heights = unit(c(5, 1, 2), c(\"lines\", \"null\", \"lines\"))),\n                    name = \"main\")\n\n# second layer \nmr_vp <- viewport(layout.pos.row = 2, layout.pos.col = 3, name = \"margin_right\")\nmb_vp <- viewport(layout.pos.row = 3, layout.pos.col = 2, name = \"margin_bottom\")\nmt_vp <- viewport(layout.pos.row = 1, layout.pos.col = 2, name = \"margin_top\")\nml_vp <- viewport(layout.pos.row = 2, layout.pos.col = 3, name = \"margin_left\")\ncenter_vp <- viewport(layout.pos.row = 2, layout.pos.col = 2, name = \"center\",\n                      xscale = extendrange(x),\n                      yscale = extendrange(y))\n\n# create the viewport\nsplot <- vpTree(main_vp, vpList(mr_vp, mb_vp, mt_vp, ml_vp, center_vp))\nsplot # Currently just the description, and not associated with the graphics device\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nviewport[main]->(viewport[margin_right], viewport[margin_bottom], viewport[margin_top], viewport[margin_left], viewport[center]) \n```\n:::\n\n```{.r .cell-code}\n# viewport of current device\ncurrent.vpTree() # current vp tree of graphic device\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nviewport[ROOT] \n```\n:::\n\n```{.r .cell-code}\ncurrent.viewport() # This is the current viewport LAYER (in the tree) of our graphics device\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nviewport[ROOT] \n```\n:::\n\n```{.r .cell-code}\n# In order to make the viewport splot active, we must add it to the vpTree of our device\npushViewport(splot)\ncurrent.vpTree() # notice how our tree has changed\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nviewport[ROOT]->(viewport[main]->(viewport[margin_right], viewport[margin_top], viewport[margin_left], viewport[margin_bottom], viewport[center])) \n```\n:::\n\n```{.r .cell-code}\ncurrent.viewport() # our current layer is center\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nviewport[center] \n```\n:::\n\n```{.r .cell-code}\ngrid.points(x, y) # drawn to center, for some reason this isn't showing up\ngrid.xaxis()\ngrid.yaxis()\ngrid.rect()\n\n# navigate to bottom margin\nseekViewport(\"margin_bottom\")\ngrid.text(\"Random X\", y=unit(1, \"lines\"))\n\nseekViewport(\"margin_left\")\ngrid.text(\"Random Y\", x=unit(1, \"lines\"), rot = 90)\n```\n\n::: {.cell-output-display}\n![](advanced_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\nRun all the code all at once, rmarkdown does some weird stuff with viewports\n\n\n::: {.cell hash='advanced_cache/html/unnamed-chunk-5_c672abc5cc7ef1ffad2e86e12bf8d34f'}\n\n```{.r .cell-code}\npushViewport(viewport())\nupViewport()\npushViewport(viewport(name = \"A\"))\nupViewport()\npushViewport(viewport(name = \"B\"))\nupViewport()\n```\n\n::: {.cell-output-display}\n![](advanced_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n\n```{.r .cell-code}\ncurrent.vpTree()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nviewport[ROOT]->(viewport[GRID.VP.2], viewport[A], viewport[B]) \n```\n:::\n:::\n\n\n\n## gtable\n\n[Unofficial Guide](https://cran.r-project.org/web/packages/gridExtra/vignettes/gtable.html)\n\nThe important structures of `gtable` object are\n\n- `grobs`:d\n\n\n\n::: {.cell hash='advanced_cache/html/unnamed-chunk-6_1afa573294482e9d6699d40f98d49a07'}\n\n```{.r .cell-code}\n# creating a gtable\ngtable(unit(1:3, c(\"cm\")),\n       unit(5, \"cm\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTableGrob (1 x 3) \"layout\": 0 grobs\n```\n:::\n\n```{.r .cell-code}\na <- rectGrob(gp = gpar(fill = \"red\"))\n\na <- rectGrob(gp = gpar(fill = \"red\"))\nb <- grobTree(rectGrob(), textGrob(\"new\\ncell\"))\nc <- ggplotGrob(qplot(1:10,1:10))\nd <- linesGrob()\nmat <- matrix(list(a, b, c, d), nrow = 2)\ng <- gtable_matrix(name = \"demo\", grobs = mat, \n                   widths = unit(c(2, 4), \"cm\"), \n                   heights = unit(c(2, 5), c(\"in\", \"lines\")))\ng\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTableGrob (2 x 2) \"demo\": 4 grobs\n  z     cells name                 grob\n1 1 (1-1,1-1) demo   rect[GRID.rect.14]\n2 2 (2-2,1-1) demo gTree[GRID.gTree.15]\n3 3 (1-1,2-2) demo       gtable[layout]\n4 4 (2-2,2-2) demo lines[GRID.lines.57]\n```\n:::\n:::\n\n\n## gridextra\n\n\n::: {.cell hash='advanced_cache/html/unnamed-chunk-7_9be94919cad058311947b000cab32fac'}\n\n```{.r .cell-code}\ndummy_grob <- function(id)  {\n  grobTree(rectGrob(gp=gpar(fill=id, alpha=0.5)), textGrob(id))\n}\ngs <- lapply(1:9, dummy_grob)\ngrid.arrange(ncol=4, grobs=gs, \n               top=\"top\\nlabel\", bottom=\"bottom\\nlabel\", \n               left=\"left\\nlabel\", right=\"right\\nlabel\")\n```\n\n::: {.cell-output-display}\n![](advanced_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n\n\n## R MacOS\n\n### Matrix Operations\n\n- [Which BLAS library is used by R?](https://cran.r-project.org/bin/macosx/RMacOSX-FAQ.html#Which-BLAS-is-used-and-how-can-it-be-changed_003f)\n- [Using the faster veclib dynamically linked library](https://gist.github.com/nicebread/6920c8287d7bffb03007)\n- [A tutorial/discussion from 2019 about rebuilding R binary with openBLAS and openMP](https://www.btskinner.io/code/install-r-with-openblas-and-openmp-on-macos-mojave/)\n\nThere are two common libraries for matrix operations, LAPACK and BLAS. There are many varieties of these two libraries, \n\n\n::: {.cell hash='advanced_cache/html/unnamed-chunk-8_bd4923bb93d5ecdd570ed8275bd93ba2'}\n\n```{.r .cell-code}\nsessionInfo() # Shows library used for matrix products\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nR version 4.2.0 (2022-04-22)\nPlatform: x86_64-apple-darwin17.0 (64-bit)\nRunning under: macOS Big Sur/Monterey 10.16\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.2/Resources/lib/libRblas.0.dylib\nLAPACK: /Library/Frameworks/R.framework/Versions/4.2/Resources/lib/libRlapack.dylib\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\nattached base packages:\n[1] grid      stats     graphics  grDevices utils     datasets  methods  \n[8] base     \n\nother attached packages:\n [1] gridExtra_2.3   gtable_0.3.0    forcats_0.5.1   stringr_1.4.0  \n [5] dplyr_1.0.9     purrr_0.3.4     readr_2.1.2     tidyr_1.2.0    \n [9] tibble_3.1.8    ggplot2_3.3.6   tidyverse_1.3.1\n\nloaded via a namespace (and not attached):\n [1] tidyselect_1.1.2  xfun_0.31         haven_2.5.0       colorspace_2.0-3 \n [5] vctrs_0.4.1       generics_0.1.3    htmltools_0.5.3   yaml_2.3.5       \n [9] utf8_1.2.2        rlang_1.0.6       pillar_1.8.0      glue_1.6.2       \n[13] withr_2.5.0       DBI_1.1.3         dbplyr_2.2.0      modelr_0.1.8     \n[17] readxl_1.4.0      lifecycle_1.0.1   munsell_0.5.0     cellranger_1.1.0 \n[21] rvest_1.0.2       htmlwidgets_1.5.4 codetools_0.2-18  evaluate_0.15    \n[25] labeling_0.4.2    knitr_1.39        tzdb_0.3.0        fastmap_1.1.0    \n[29] fansi_1.0.3       broom_0.8.0       backports_1.4.1   scales_1.2.0     \n[33] jsonlite_1.8.0    farver_2.1.1      fs_1.5.2          hms_1.1.1        \n[37] digest_0.6.29     stringi_1.7.8     cli_3.4.1         tools_4.2.0      \n[41] magrittr_2.0.3    crayon_1.5.1      pkgconfig_2.0.3   ellipsis_0.3.2   \n[45] xml2_1.3.3        reprex_2.0.1      lubridate_1.8.0   assertthat_0.2.1 \n[49] rmarkdown_2.14    httr_1.4.3        rstudioapi_0.13   R6_2.5.1         \n[53] compiler_4.2.0   \n```\n:::\n:::\n\n\nOf note, R binary versus the CRAN version of the R binary have different libraries bundled together. For older versions of Rstudio, there is a BLAS library that is provided with Apple that sometimes is faster. Ultimately, R will look for a symlinked library in the `lib/` folder.\n\n\n::: {.cell hash='advanced_cache/html/unnamed-chunk-9_22e98f3510f92b240eeaa358256109e7'}\n\n```{.bash .cell-code}\n# Install openblas\nbrew install openblas\n\n# Some potentially useful symlinking commands\nln -sf /usr/local/opt/openblas/lib/libopenblas.dylib /usr/local/Cellar/r/4.1.2/lib/R/lib/libRblas.dylib\nln -sf /usr/local/opt/openblas/lib/libopenblas.dylib /usr/local/Cellar/r/4.1.2/lib/libRblas.dylib\n```\n:::\n\n\n## Metaprogramming\n\n### Expressions\n\n* constants\n* symbols\n\n\n::: {.cell hash='advanced_cache/html/unnamed-chunk-10_1d19325d471c1e2137b6dff3d6a54de4'}\n\n```{.r .cell-code}\nlibrary(rlang)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'rlang'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:purrr':\n\n    %@%, as_function, flatten, flatten_chr, flatten_dbl, flatten_int,\n    flatten_lgl, flatten_raw, invoke, splice\n```\n:::\n\n```{.r .cell-code}\n# two ways of creating a symbol\nsym(\"x\") # symbol\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nx\n```\n:::\n\n```{.r .cell-code}\nclass(expr(x)) # symbol\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"name\"\n```\n:::\n\n```{.r .cell-code}\nquo(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<quosure>\nexpr: ^x\nenv:  global\n```\n:::\n\n```{.r .cell-code}\n?quo\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHelp on topic 'quo' was found in the following packages:\n\n  Package               Library\n  tidyselect            /Library/Frameworks/R.framework/Versions/4.2/Resources/library\n  rlang                 /Library/Frameworks/R.framework/Versions/4.2/Resources/library\n  ggplot2               /Library/Frameworks/R.framework/Versions/4.2/Resources/library\n  dplyr                 /Library/Frameworks/R.framework/Versions/4.2/Resources/library\n\n\nUsing the first match ...\n```\n:::\n\n```{.r .cell-code}\nexpr(\"x\") # expression\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"x\"\n```\n:::\n\n```{.r .cell-code}\nas_string(sym(\"x\")) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"x\"\n```\n:::\n\n```{.r .cell-code}\nas_name(sym(\"x\")) # character\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"x\"\n```\n:::\n\n```{.r .cell-code}\nclass(as_name(\"x\")) # character\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"character\"\n```\n:::\n:::\n\n\n\n### Quosures\n\nQuosures are special type of *defused expression* that also keeps track of the original context the expression was written in.\n\n#### quo\n\n`quo is used to capture local expressions, and also track the environment the expression was written.\n\n#### enquo\n\n<!-- raw needed because liquid trying to process raw code -->\n\n{% raw %}\n`enquo` is used to defuse function arguments, the `{{` is short for this common pattern. The arguments need to be defused because otherwise R will try to evaluate the expression in its original environment.\n{% endraw %}\n\n\n::: {.cell hash='advanced_cache/html/unnamed-chunk-11_95ab403a0d6d06a99bd30f01868e09b1'}\n\n```{.r .cell-code}\nmy_function <- function(var) {\n  var <- enquo(var)\n  their_function(!!var)\n}\n\n# Equivalently\nmy_function <- function(var) {\n  their_function({{ var }})\n}\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}