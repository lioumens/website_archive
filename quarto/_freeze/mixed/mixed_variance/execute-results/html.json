{
  "hash": "b65cedc70f069e2aa497b3307332efea",
  "result": {
    "markdown": "---\ntitle: \"Mixed Models (Variance)\"\nauthor: \"Michael Liou\"\ndate: \"2022-12-19\"\nexecute:\n  cache: true\n---\n\n::: {.cell hash='mixed_variance_cache/html/setup_b41e61d6ecdba95c0fb3a728fddbc694'}\n\n```{.r .cell-code  code-summary=\"Libraries\"}\nlibrary(lattice)\nlibrary(lme4)\nlibrary(nlme)\nlibrary(glmmTMB) # template model builder, designed as improved glmmADMB\nlibrary(sommer) # asREML replacement\nlibrary(afex) # easy anova\nlibrary(emmeans)\nlibrary(broom.mixed) # clean mixed model outputs\nlibrary(kableExtra) # for tables\nlibrary(tidyverse)\n```\n:::\n\n\n\n::: {.callout-note appearance=\"minimal\" icon=false}\n\nThis document is still a work in progress!\n\n:::\n\n\n# Introduction\n\nUsing random effects into the modeling equation gives us an opportunity to account for correlations among observations in a structured manner. Having a lot of flexibility in modeling a covariance structure is generally a pretty computationally difficult problem, but modern software have made this problem rather manageable. There are many numerical methods of solving the same equations, and thus a wide array of software to consider. Given the numerical complexity of the problem, the software will often times give different estimates and standard errors. \n\nThe example that we use throughout this section is a [multi-environment potato RCBD](https://rdrr.io/cran/sommer/man/DT_example.html) (`DT_example` from the `sommer` package). The covariates in the dataset are: \n\n* `Name` - the genotype of potato plant\n* `Env` - location/year combination.\n* `Block` - coded uniquely across the environments\n* `Yield` - a response, the number of potatoes from the plant\n* `Weight` - another response, weight of the potatoes, to illustrate multiple trait experiments\n\n\n::: {.cell hash='mixed_variance_cache/html/unnamed-chunk-1_b614fc934c9bde1cf5d34a845008e33f'}\n\n```{.r .cell-code}\ndata(DT_example) # library(sommer)\n```\n:::\n\n::: {.cell hash='mixed_variance_cache/html/unnamed-chunk-2_6038af937cb8a57b6880220e378da20d'}\n\n```{.r .fold-hide .cell-code}\nDT_example %>% ggplot(aes(Name, Yield)) +\n  geom_point() + \n  facet_grid(Env~.) +\n  theme_light(base_size = 13) +\n  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) + \n  labs(title = \"Multi-Environment Potato Trial\")\n```\n\n::: {.cell-output-display}\n![](mixed_variance_files/figure-html/unnamed-chunk-2-1.png){width=768}\n:::\n:::\n\n\n# Theory\n\n**Under construction**\n\n# Ecosystem Overview {.tabset}\n\nThe R packages that can do forms of variance covariance structures (not an exhaustive list):\n\n\n\n::: {.cell hash='mixed_variance_cache/html/unnamed-chunk-3_96f9bba1ec792fee47d6630aa09b9ff6'}\n::: {.cell-output-display}\n`````{=html}\n<table class=\" lightable-paper table table-hover table-condensed\" style='font-family: \"Arial Narrow\", arial, helvetica, sans-serif; width: auto !important; margin-left: auto; margin-right: auto; margin-left: auto; margin-right: auto;border-bottom: 0;'>\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> software </th>\n   <th style=\"text-align:left;\"> commercial </th>\n   <th style=\"text-align:left;\"> estimation<sup>2</sup> </th>\n   <th style=\"text-align:left;\"> my rating<sup>1</sup> </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> <a href=\"https://cran.r-project.org/web/packages/glmmTMB/index.html\" style=\"     \">glmmTMB</a> </td>\n   <td style=\"text-align:left;\"> Free </td>\n   <td style=\"text-align:left;\"> ML, REML (AD) </td>\n   <td style=\"text-align:left;\"> ★★ </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> <a href=\"https://cran.r-project.org/web/packages/sommer/\" style=\"     \">sommer</a> </td>\n   <td style=\"text-align:left;\"> Free </td>\n   <td style=\"text-align:left;\"> ML and REML (NR, AI, EMMA) </td>\n   <td style=\"text-align:left;\"> ★★★★ </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> <a href=\"https://cran.r-project.org/web/packages/lme4/\" style=\"     \">lme4</a> </td>\n   <td style=\"text-align:left;\"> Free </td>\n   <td style=\"text-align:left;\"> ML and REML (Iterative PLS) </td>\n   <td style=\"text-align:left;\"> ★ </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> <a href=\"https://cran.r-project.org/web/packages/nlme/\" style=\"     \">nlme</a> </td>\n   <td style=\"text-align:left;\"> Free </td>\n   <td style=\"text-align:left;\"> ML and REML (EM -&gt; NR) </td>\n   <td style=\"text-align:left;\"> ★★★★ </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> <a href=\"https://documentation.sas.com/doc/en/statcdc/14.2/statug/statug_mixed_details01.htm\" style=\"     \">SAS</a> </td>\n   <td style=\"text-align:left;\"> Paid </td>\n   <td style=\"text-align:left;\"> ML, REML and MOM (MIVQUE0 -&gt; W Transformation Sweep) </td>\n   <td style=\"text-align:left;\"> ★★★ </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> <a href=\"https://vsni.co.uk/software/asreml-r\" style=\"     \">AS-REML</a> </td>\n   <td style=\"text-align:left;\"> Paid </td>\n   <td style=\"text-align:left;\"> REML (AI) </td>\n   <td style=\"text-align:left;\"> ?? </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> <a href=\"https://cran.r-project.org/web/packages/EMMREML/index.html\" style=\"     \">emmREML</a> </td>\n   <td style=\"text-align:left;\"> Free </td>\n   <td style=\"text-align:left;\"> EMMA </td>\n   <td style=\"text-align:left;\"> ?? </td>\n  </tr>\n</tbody>\n<tfoot>\n<tr><td style=\"padding: 0; \" colspan=\"100%\">\n<sup>1</sup> ?? means I haven't tried the software</td></tr>\n<tr><td style=\"padding: 0; \" colspan=\"100%\">\n<sup>2</sup> AI = Average Information, AD = Automatic Differentiation, NR = Newton Rapheson, EMMA = Efficient Mixed Model Association, EM = Expectation-Maximization, MOM = Method of Moments; </td></tr>\n</tfoot>\n</table>\n\n`````\n:::\n:::\n\n\nThe ratings are rather subjective, based on stability, ease of use, flexibility and target applications. Personally, the order in which I would use the software (and what I recommend to others) would be:\n* emmREML - implements the mixed model association, mentioned above.\n\n1. nlme\n2. SAS (proc MIXED)\n3. glmmTMB\n4. sommer\n\n`nlme` will offer many options of variance structure with similar performance if you need more flexibility, but does not deal with crossed random effects. SAS has a very intuitive interface for specifying the \"G\"-side and \"R\"-side and will likely be able to handle your use case. glmmTMB also has a very intuitive syntax, mostly following lme4 syntax, but currently the \"R\"-side modeling is kind of hackish and a workaround (sets the residual error to something very small). sommer I think is the newest package, and thus the components of design are still settling. It is by far the most flexible for variance structure designs, and targeted specifically to those working in multi-environment trails but I think the syntax does take some getting used to.\n\n\n* sommer - takes an AS-REML approach to fitting the variance components. \n\n* glmmTMB ([R Package](https://cran.r-project.org/web/packages/glmmTMB/index.html)) ([Paper](https://journal.r-project.org/archive/2017/RJ-2017-066/RJ-2017-066.pdf)) - is primarily a glmm package that uses lme4 based formula syntax. It uses the r package `TMB` in the background, which is MLE based and uses Laplace approximations for integrating out random effects. \n* SAS ([Docs](https://documentation.sas.com/doc/en/statcdc/14.2/statug/statug_mixed_details01.htm)) ([paper](https://www.researchgate.net/publication/242913395_Computing_Gaussian_Likelihoods_and_Their_Derivatives_for_General_Linear_Mixed_Models)) - uses a sweep method on the REML and ML profiled likelihood. There's good discussion of the methods in their documentation.\n* afex - reformulates the formula statement and uses lme4 in the background\n* MCMCglmm - takes a bayesian simulation approach to mixed modeling\n* INLA - Integrated Nested Laplacian Approximation\n\n## nlme\n\nnlme is a rather stable package with a lot of facilities to account for many different variance structures on both the \"G\"-side and the \"R\"-side.\n\nSee `?pdClasses` and `?varClasses` for functional variance modeling.\n\n## sommer\n\nYou can probably think of sommer as the free version of AS-REML. It particularly specializes in multienvironment, and heterogenous variance structures.\n\nThe variance component specification is a little cryptic, but based mostly on hadamard matrix multiplication.\n\n* `mmer`\n  * `vsr` = \"Variance Structure for Random effects\", use this to build the variance, outer function\n    * `dsr` = diagonal covariance structure\n    * `usr` = unstructure covraince structure\n* `mmec` - the main \"average information\" algorithm for solving\n  * `vsc` = \"variance structure for coefficients\", `random=~vsc(e, f, h, g)` means var(g) = G.e @ G.f @ G.h @ I.g\n    * `isc` = identity covariance structure\n  \n\nThe numbering in the matrix means it's a constraint\n\n0) not to be estimated\n1) estimated and constrained to be positive (i.e. variance component)\n2) estimated and unconstrained (i.e., normally a covariance)\n3) not estimated but fixed (provided by `Gti` arg)\n\n\n::: {.cell hash='mixed_variance_cache/html/unnamed-chunk-4_f2968422f55d7aca3993a44c576c2460'}\n\n```{.r .cell-code}\nx <- as.factor(c(1:5,2:6,1:5))\nusr(x) # list(vector, vcov structure)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n   1 2 3 4 5 6\n1  1 0 0 0 0 0\n2  0 1 0 0 0 0\n3  0 0 1 0 0 0\n4  0 0 0 1 0 0\n5  0 0 0 0 1 0\n6  0 1 0 0 0 0\n7  0 0 1 0 0 0\n8  0 0 0 1 0 0\n9  0 0 0 0 1 0\n10 0 0 0 0 0 1\n11 1 0 0 0 0 0\n12 0 1 0 0 0 0\n13 0 0 1 0 0 0\n14 0 0 0 1 0 0\n15 0 0 0 0 1 0\nattr(,\"assign\")\n[1] 1 1 1 1 1 1\nattr(,\"contrasts\")\nattr(,\"contrasts\")$dummy\n[1] \"contr.treatment\"\n\n\n[[2]]\n  1 2 3 4 5 6\n1 1 2 2 2 2 2\n2 2 1 2 2 2 2\n3 2 2 1 2 2 2\n4 2 2 2 1 2 2\n5 2 2 2 2 1 2\n6 2 2 2 2 2 1\n```\n:::\n\n```{.r .cell-code}\nx <- as.factor(c(1:5,1:5,1:6))\ncsr(x, matrix(1, 6, 6))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n   1 2 3 4 5 6\n1  1 0 0 0 0 0\n2  0 1 0 0 0 0\n3  0 0 1 0 0 0\n4  0 0 0 1 0 0\n5  0 0 0 0 1 0\n6  1 0 0 0 0 0\n7  0 1 0 0 0 0\n8  0 0 1 0 0 0\n9  0 0 0 1 0 0\n10 0 0 0 0 1 0\n11 1 0 0 0 0 0\n12 0 1 0 0 0 0\n13 0 0 1 0 0 0\n14 0 0 0 1 0 0\n15 0 0 0 0 1 0\n16 0 0 0 0 0 1\nattr(,\"assign\")\n[1] 1 1 1 1 1 1\nattr(,\"contrasts\")\nattr(,\"contrasts\")$dummy\n[1] \"contr.treatment\"\n\n\n[[2]]\n  1 2 3 4 5 6\n1 1 1 1 1 1 1\n2 1 1 1 1 1 1\n3 1 1 1 1 1 1\n4 1 1 1 1 1 1\n5 1 1 1 1 1 1\n6 1 1 1 1 1 1\n```\n:::\n:::\n\n::: {.cell hash='mixed_variance_cache/html/unnamed-chunk-5_a02046c8f1f4106e46f33157902dba12'}\n\n```{.r .cell-code}\nx <- as.factor(c(1:5,2:6,1:5))\ndsr(x) # list(vector, vcov)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n   1 2 3 4 5 6\n1  1 0 0 0 0 0\n2  0 1 0 0 0 0\n3  0 0 1 0 0 0\n4  0 0 0 1 0 0\n5  0 0 0 0 1 0\n6  0 1 0 0 0 0\n7  0 0 1 0 0 0\n8  0 0 0 1 0 0\n9  0 0 0 0 1 0\n10 0 0 0 0 0 1\n11 1 0 0 0 0 0\n12 0 1 0 0 0 0\n13 0 0 1 0 0 0\n14 0 0 0 1 0 0\n15 0 0 0 0 1 0\nattr(,\"assign\")\n[1] 1 1 1 1 1 1\nattr(,\"contrasts\")\nattr(,\"contrasts\")$dummy\n[1] \"contr.treatment\"\n\n\n[[2]]\n  1 2 3 4 5 6\n1 1 0 0 0 0 0\n2 0 1 0 0 0 0\n3 0 0 1 0 0 0\n4 0 0 0 1 0 0\n5 0 0 0 0 1 0\n6 0 0 0 0 0 1\n```\n:::\n:::\n\n\n### Further Reading {.unlisted .unnumbered}\n\nThey overview their package in [this paper](https://journals.plos.org/plosone/article?id=10.1371/journal.pone.0156744#), and implement three programs for fitting: \n\n * Newton Rapheson Direct Inversion\n * [\"Average Information REML\"](http://faculty.washington.edu/tathornt/BIOST551/articles_2012/AverageInformation.pdf) - original paper by same authors of the AS-REML package. A great example of this optimization step with an example is given in a book chapter by author of \"sommer\" package [Overview of Major Computer Packages for Genomic Prediction of Complex Traits](https://link.springer.com/protocol/10.1007/978-1-0716-2205-6_6)\n  * [\"Efficient Mixed Model Association (EMMA)\"](https://academic.oup.com/genetics/article/178/3/1709/6061473?login=false)\n\n## SAS\n\n* [Tips and Strategies for Mixed Modeling with SAS](https://www.lexjansen.com/mwsug/2012/SA/MWSUG-2012-SA15.pdf)\n\n## glmmTMB\n\nThe [glmmTMB variance covariance structures vignette](https://cran.r-project.org/web/packages/glmmTMB/vignettes/covstruct.html) has a lot of information.\n\n# Examples\n\n## Homogenous variance {.tabset}\n\n<figure>\n<img src=\"img/homo_G_homo_R.png\"></img>\n<figcaption></figcaption>\n</figure>\n\n\n### lme4\n\n\n::: {.cell hash='mixed_variance_cache/html/unnamed-chunk-6_4dfe08ed05797ab4f8dbf85d12435b91'}\n\n```{.r .cell-code}\n# lmer approach\nmmod1 <- lmer(Yield ~ Env + (1 | Name) + (1|Env:Name), data = DT_example)\n# mmod1_alt <- lmer(Yield ~ Env + (1 | Name/Env), data = DT_example) # same way of specifying model identical results\n\n# summary(mmod1_alt)\nas.data.frame(VarCorr(mmod1))$vcov\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5.173234 3.681927 4.366211\n```\n:::\n\n```{.r .cell-code}\n # Groups   Name        Std.Dev.\n # Env:Name (Intercept) 2.2745  \n # Name     (Intercept) 1.9188  \n # Residual             2.0895\n\n# profiling for standard errors\npr_mmod1 <- profile(mmod1)\n# xyplot (pr_mmod1 , aspect =1.3)\n# splom(pr_mmod1)\n# densityplot(pr_mmod1)\n\n# taking the half the width of a .68 confidence interval as an estimate of a standard error of the estimate\nconfint(pr_mmod1, c(\".sig01\", \".sig02\", \".sigma\"), level = .68)^2 %>% # square for variance\n  as.data.frame() %>%\n  mutate(var_se_ish = (`84 %` - `16 %`) / 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n           16 %     84 % var_se_ish\n.sig01 3.665686 6.471304  1.4028093\n.sig02 2.248953 5.305835  1.5284410\n.sigma 3.779901 5.084092  0.6520955\n```\n:::\n:::\n\n\n### sommer\n\n\n::: {.cell hash='mixed_variance_cache/html/unnamed-chunk-7_5313008f882dcd1102872ba8b5d6c4a5'}\n\n```{.r .cell-code}\n# Univariate, homogenous variance models,\n# for p > n\nans1r <- mmer(Yield ~ Env,\n              random = ~ Name + Env:Name,\n              rcov = ~ units, # residual structure\n              data = DT_example, verbose = FALSE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nVersion out of date. Please update sommer to the newest version using:\ninstall.packages('sommer') in a new session\n Use the 'dateWarning' argument to disable the warning message.\n```\n:::\n\n```{.r .cell-code}\nsummary(ans1r)$varcomp\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                      VarComp VarCompSE   Zratio Constraint\nName.Yield-Yield     3.681877 1.6909561 2.177394   Positive\nEnv:Name.Yield-Yield 5.173062 1.4952313 3.459707   Positive\nunits.Yield-Yield    4.366285 0.6470458 6.748031   Positive\n```\n:::\n:::\n\n::: {.cell hash='mixed_variance_cache/html/unnamed-chunk-8_947b98bf31b40c2c164c144cb49d1c67'}\n\n```{.r .cell-code}\n# MME-based Average information, for records > coefficients?\nans1c <- mmec(Yield~Env,\n              random= ~ Name + Env:Name,\n              rcov= ~ units,\n              data=DT_example, verbose = FALSE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nVersion out of date. Please update sommer to the newest version using:\ninstall.packages('sommer') in a new session\n Use the 'dateWarning' argument to disable the warning message.\n```\n:::\n\n```{.r .cell-code}\nsummary(ans1c)$varcomp\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                  VarComp VarCompSE   Zratio Constraint\nName:isc:isc     3.702831  1.698858 2.179600   Positive\nEnv:Name:isc:isc 5.132119  1.875676 2.736143   Positive\nunits:isc:isc    4.465685  1.611163 2.771715   Positive\n```\n:::\n:::\n\n\n\n### nlme\n\n\n::: {.cell hash='mixed_variance_cache/html/unnamed-chunk-9_47718caafc70386e22bebd85d84b6bd0'}\n\n```{.r .cell-code}\n# lme method for fitting homogenous variance model, nested\nlmod1 <- lme(Yield~Env,\n             random = list(Name = pdSymm(form = ~1),\n                           Env = pdSymm(form = ~1)),\n             method = \"REML\",\n             data = DT_example)\n\nsummary(lmod1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nLinear mixed-effects model fit by REML\n  Data: DT_example \n      AIC     BIC    logLik\n  948.197 967.421 -468.0985\n\nRandom effects:\n Formula: ~1 | Name\n        (Intercept)\nStdDev:     1.91884\n\n Formula: ~1 | Env %in% Name\n        (Intercept) Residual\nStdDev:    2.274477 2.089546\n\nFixed effects:  Yield ~ Env \n                Value Std.Error DF   t-value p-value\n(Intercept) 16.496350 0.6855031 91 24.064589       0\nEnvCA.2012  -5.776757 0.7558206 51 -7.643027       0\nEnvCA.2013  -6.380478 0.7960544 51 -8.015128       0\n Correlation: \n           (Intr) ECA.2012\nEnvCA.2012 -0.732         \nEnvCA.2013 -0.712  0.643  \n\nStandardized Within-Group Residuals:\n        Min          Q1         Med          Q3         Max \n-2.95612756 -0.46306587 -0.03282517  0.37592452  4.22246535 \n\nNumber of Observations: 185\nNumber of Groups: \n         Name Env %in% Name \n           41            94 \n```\n:::\n:::\n\n\n### SAS\n\n\n::: {.cell hash='mixed_variance_cache/html/unnamed-chunk-10_43bc5636a6e63cf070e6e7e2a6b612af'}\n\n```{.sas .cell-code}\n# SAS example\nproc mixed data=dt covtest;\nclass env name;\nmodel yield = env;\nrandom name name*env;\nrun;\n```\n:::\n\n\n* `covtest` - for the standard errors of covariance estimates\n\n| Cov Parm | Estimate | Standard Error | Z-Value | Pr > Z |\n|----------+----------+----------------+---------+--------|\n| name     |   3.7861 |         1.6078 |    2.35 | 0.0093 |\n| env*name |   5.1616 |         1.4675 |    3.52 | 0.0002 |\n| Residual |   4.3678 |         0.6477 |    6.74 | <.0001 |\n\nTable: SAS output, homogenous variance\n\n### glmmTMB\n\n\n::: {.cell hash='mixed_variance_cache/html/unnamed-chunk-11_29d627f15a2d5656fc2f0d62663430b3'}\n\n```{.r .cell-code}\ntmod1 <- glmmTMB(Yield ~ Env + (1 | Name) + (1 | Env:Name), \n                 REML = TRUE,\n                 data = DT_example)\nsummary(tmod1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n Family: gaussian  ( identity )\nFormula:          Yield ~ Env + (1 | Name) + (1 | Env:Name)\nData: DT_example\n\n     AIC      BIC   logLik deviance df.resid \n   948.2    967.5   -468.1    936.2      182 \n\nRandom effects:\n\nConditional model:\n Groups   Name        Variance Std.Dev.\n Name     (Intercept) 3.682    1.919   \n Env:Name (Intercept) 5.173    2.274   \n Residual             4.366    2.090   \nNumber of obs: 185, groups:  Name, 41; Env:Name, 94\n\nDispersion estimate for gaussian family (sigma^2): 4.37 \n\nConditional model:\n            Estimate Std. Error z value Pr(>|z|)    \n(Intercept)  16.4964     0.6871  24.010  < 2e-16 ***\nEnvCA.2012   -5.7768     0.7581  -7.620 2.54e-14 ***\nEnvCA.2013   -6.3805     0.8008  -7.968 1.61e-15 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n```\n:::\n:::\n\n\n## {- .unlisted .unnumbered}\n\n### Comparison {.unlisted .unnumbered}\n\nThe results with lmer are quite close, but the effect from average information is quite different. The conclusion should be that even for simple models, the numerical differences of the variances can be quite different depending on the optimization algorithm.\n\n\n## Heterogeneous G, homogenous R {.tabset}\n\nThis is an example of heterogenous VC effects for G2, and still identity for R.\n\n<figure>\n<img src=\"img/hetero_G_homo_R.png\"></img>\n<figcaption></figcaption>\n</figure>\n\n### lme4\n\nYou can force `lmer` to fit several random effects by expanding the variable to be a dummy variable\n\n\n::: {.cell hash='mixed_variance_cache/html/unnamed-chunk-12_1e62c6ae7a68f4ccde2e180c8ba58016'}\n\n```{.r .cell-code}\nDT_lmer <- bind_cols(DT_example,\n                     model.matrix(~0 + Env, data=DT_example))\nDT_lmer %>% names()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"Name\"       \"Env\"        \"Loc\"        \"Year\"       \"Block\"     \n [6] \"Yield\"      \"Weight\"     \"EnvCA.2011\" \"EnvCA.2012\" \"EnvCA.2013\"\n```\n:::\n\n```{.r .cell-code}\nmmod2 <- lmer(Yield ~ Env + (1|Name) + (0 + EnvCA.2011 + EnvCA.2012 + EnvCA.2013 || Name), \n              data = DT_lmer)\n\nsummary(mmod2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nLinear mixed model fit by REML. t-tests use Satterthwaite's method [\nlmerModLmerTest]\nFormula: \nYield ~ Env + (1 | Name) + (0 + EnvCA.2011 + EnvCA.2012 + EnvCA.2013 ||  \n    Name)\n   Data: DT_lmer\n\nREML criterion at convergence: 932.2\n\nScaled residuals: \n    Min      1Q  Median      3Q     Max \n-2.6628 -0.4984 -0.0448  0.4083  4.4902 \n\nRandom effects:\n Groups   Name        Variance Std.Dev.\n Name     (Intercept)  2.964   1.722   \n Name.1   EnvCA.2011  10.426   3.229   \n Name.2   EnvCA.2012   2.659   1.631   \n Name.3   EnvCA.2013   5.702   2.388   \n Residual              4.398   2.097   \nNumber of obs: 185, groups:  Name, 41\n\nFixed effects:\n            Estimate Std. Error      df t value Pr(>|t|)    \n(Intercept)  16.5109     0.8269 23.0600  19.966 4.73e-16 ***\nEnvCA.2012   -5.8089     0.8593 22.5089  -6.760 7.60e-07 ***\nEnvCA.2013   -6.4233     0.9359 30.3461  -6.863 1.21e-07 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nCorrelation of Fixed Effects:\n           (Intr) ECA.2012\nEnvCA.2012 -0.860         \nEnvCA.2013 -0.799  0.767  \n```\n:::\n:::\n\n\n\n### sommer\n\n\n::: {.cell hash='mixed_variance_cache/html/unnamed-chunk-13_6a2765c6133026bf8a4b7c5c7f39fe68'}\n\n```{.r .cell-code}\nans2r <- mmer(Yield~Env,\n              random= ~Name + vsr(dsr(Env),Name), # the second one is an interaction term, and specifies\n              rcov= ~units,\n              data=DT_example, verbose = FALSE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nVersion out of date. Please update sommer to the newest version using:\ninstall.packages('sommer') in a new session\n Use the 'dateWarning' argument to disable the warning message.\n```\n:::\n\n```{.r .cell-code}\nsummary(ans2r)$varcomp\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                           VarComp VarCompSE   Zratio Constraint\nName.Yield-Yield          2.964764  1.505450 1.969354   Positive\nCA.2011:Name.Yield-Yield 10.423874  4.454365 2.340148   Positive\nCA.2012:Name.Yield-Yield  2.657574  1.803218 1.473796   Positive\nCA.2013:Name.Yield-Yield  5.702131  2.511301 2.270588   Positive\nunits.Yield-Yield         4.397686  0.651709 6.747930   Positive\n```\n:::\n:::\n\n::: {.cell hash='mixed_variance_cache/html/unnamed-chunk-14_261a468b58e5997cf63d86abe307c6a0'}\n\n```{.r .cell-code}\nans2e <- mmec(Yield~Env,\n              random = ~Name + vsc(dsc(Env), isc(Name)),\n              rcov = ~units,\n              data = DT_example,\n              verbose = FALSE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nVersion out of date. Please update sommer to the newest version using:\ninstall.packages('sommer') in a new session\n Use the 'dateWarning' argument to disable the warning message.\n```\n:::\n\n```{.r .cell-code}\nsummary(ans2e)$varcomp\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                           VarComp VarCompSE   Zratio Constraint\nName:isc:isc              3.026478  1.525291 1.984198   Positive\nEnv:Name:CA.2011:CA.2011 10.135905  3.763618 2.693128   Positive\nEnv:Name:CA.2012:CA.2012  2.642893  2.210557 1.195578   Positive\nEnv:Name:CA.2013:CA.2013  5.780788  3.144418 1.838429   Positive\nunits:isc:isc             4.152878  1.520209 2.731780   Positive\n```\n:::\n:::\n\n\n### glmmTMB\n\n\n::: {.cell hash='mixed_variance_cache/html/unnamed-chunk-15_514556163cd5623c63f7c3f41123b93e'}\n\n```{.r .cell-code}\n# glmmTMB\ntmod2 <- glmmTMB(Yield ~ Env + (1|Name) + diag(Env+0|Name), # just for more intuitive summary results, (changes interpretation of covariance paramters)\n                 data = DT_example,\n                 REML = TRUE)\nsummary(tmod2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n Family: gaussian  ( identity )\nFormula:          Yield ~ Env + (1 | Name) + diag(Env + 0 | Name)\nData: DT_example\n\n     AIC      BIC   logLik deviance df.resid \n   948.2    974.0   -466.1    932.2      180 \n\nRandom effects:\n\nConditional model:\n Groups   Name        Variance Std.Dev. Corr      \n Name     (Intercept)  2.964   1.722              \n Name.1   EnvCA.2011  10.426   3.229              \n          EnvCA.2012   2.659   1.631    0.00      \n          EnvCA.2013   5.702   2.388    0.00 0.00 \n Residual              4.398   2.097              \nNumber of obs: 185, groups:  Name, 41\n\nDispersion estimate for gaussian family (sigma^2):  4.4 \n\nConditional model:\n            Estimate Std. Error z value Pr(>|z|)    \n(Intercept)  16.5109     0.8281  19.939  < 2e-16 ***\nEnvCA.2012   -5.8089     0.8613  -6.744 1.54e-11 ***\nEnvCA.2013   -6.4233     0.9399  -6.834 8.24e-12 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n```\n:::\n:::\n\n\n### nlme\n\n\n::: {.cell hash='mixed_variance_cache/html/unnamed-chunk-16_3c28868de9fa4c09d2c9dc8c2fc7d524'}\n\n```{.r .cell-code}\n# lme method of fitting heterogenous variance structure\nlmod2 <- lme(Yield ~ Env,\n             random = list(Name = pdBlocked(\n               list(pdIdent(~1), # Identity for Name\n                    pdDiag(~Env-1)))), # Diagonal structure for Environment:Name\n             method = \"REML\",\n             data = DT_example)\n\nVarCorr(lmod2) # Nice, they match!\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nName = pdIdent(1), pdDiag(Env - 1) \n            Variance  StdDev  \n(Intercept)  2.963725 1.721547\nEnvCA.2011  10.425967 3.228927\nEnvCA.2012   2.658958 1.630631\nEnvCA.2013   5.702071 2.387901\nResidual     4.397553 2.097034\n```\n:::\n\n```{.r .cell-code}\nsummary(lmod2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nLinear mixed-effects model fit by REML\n  Data: DT_example \n       AIC      BIC    logLik\n  948.2295 973.8615 -466.1147\n\nRandom effects:\n Composite Structure: Blocked\n\n Block 1: (Intercept)\n Formula: ~1 | Name\n        (Intercept)\nStdDev:    1.721547\n\n Block 2: EnvCA.2011, EnvCA.2012, EnvCA.2013\n Formula: ~Env - 1 | Name\n Structure: Diagonal\n        EnvCA.2011 EnvCA.2012 EnvCA.2013 Residual\nStdDev:   3.228927   1.630631   2.387901 2.097034\n\nFixed effects:  Yield ~ Env \n                Value Std.Error  DF   t-value p-value\n(Intercept) 16.510938 0.8269335 142 19.966464       0\nEnvCA.2012  -5.808897 0.8593216 142 -6.759864       0\nEnvCA.2013  -6.423279 0.9358819 142 -6.863343       0\n Correlation: \n           (Intr) ECA.2012\nEnvCA.2012 -0.860         \nEnvCA.2013 -0.799  0.767  \n\nStandardized Within-Group Residuals:\n        Min          Q1         Med          Q3         Max \n-2.66278393 -0.49845117 -0.04478272  0.40832173  4.49017462 \n\nNumber of Observations: 185\nNumber of Groups: 41 \n```\n:::\n:::\n\n\n### afex\n\n\n::: {.cell hash='mixed_variance_cache/html/unnamed-chunk-17_e617bee5f83af0fb3969afdaa50e7e6d'}\n\n```{.r .cell-code}\nset_default_contrasts()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nsetting contr.treatment globally: options(contrasts=c('contr.treatment', 'contr.poly'))\n```\n:::\n\n```{.r .cell-code}\namod2 <- mixed(Yield ~ Env + (1|Name) + (0 + Env || Name),\n      data = DT_example,\n      check_contrasts = FALSE,\n      expand_re = TRUE)\nsummary(amod2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nLinear mixed model fit by REML. t-tests use Satterthwaite's method [\nlmerModLmerTest]\nFormula: Yield ~ Env + (1 | Name) + (0 + re2.EnvCA.2011 + re2.EnvCA.2012 +  \n    re2.EnvCA.2013 || Name)\n   Data: data\n\nREML criterion at convergence: 932.2\n\nScaled residuals: \n    Min      1Q  Median      3Q     Max \n-2.6628 -0.4984 -0.0448  0.4083  4.4902 \n\nRandom effects:\n Groups   Name           Variance Std.Dev.\n Name     (Intercept)     2.964   1.722   \n Name.1   re2.EnvCA.2011 10.426   3.229   \n Name.2   re2.EnvCA.2012  2.659   1.631   \n Name.3   re2.EnvCA.2013  5.702   2.388   \n Residual                 4.398   2.097   \nNumber of obs: 185, groups:  Name, 41\n\nFixed effects:\n            Estimate Std. Error      df t value Pr(>|t|)    \n(Intercept)  16.5109     0.8269 23.0600  19.966 4.73e-16 ***\nEnvCA.2012   -5.8089     0.8593 22.5089  -6.760 7.60e-07 ***\nEnvCA.2013   -6.4233     0.9359 30.3461  -6.863 1.21e-07 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nCorrelation of Fixed Effects:\n           (Intr) ECA.2012\nEnvCA.2012 -0.860         \nEnvCA.2013 -0.799  0.767  \n```\n:::\n:::\n\n\n\n### SAS\n\n\n::: {.cell hash='mixed_variance_cache/html/unnamed-chunk-18_b99880e04a51a8e2d4b8dd6ed3cc6b63'}\n\n```{.sas .cell-code}\n# SAS\nproc mixed data=dt;\nclass env name;\nmodel yield = env;\nrandom name / G;\nrandom name*env / group = env;\nrun;\n```\n:::\n\n\n\n\n## Heterogenous G and R {.tabset}\n\nAlso called a Heterogeneous CS model.\n\n<figure>\n<img src=\"img/hetero_G_hetero_R.png\"></img>\n<figcaption></figcaption>\n</figure>\n\n### sommer\n\n\n::: {.cell hash='mixed_variance_cache/html/unnamed-chunk-19_c1e0f1c1c43a31eb2d800cc4ec1bc38d'}\n\n```{.r .cell-code}\nans3r <- mmer(Yield~Env,\n              random= ~Name + vsr(dsr(Env),Name), # the second one is an interaction term, and specifies\n              rcov= ~vsr(dsr(Env),units),\n              data=DT_example, \n              verbose = FALSE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nVersion out of date. Please update sommer to the newest version using:\ninstall.packages('sommer') in a new session\n Use the 'dateWarning' argument to disable the warning message.\n```\n:::\n\n```{.r .cell-code}\nsqrt(summary(ans3r)$varcomp$VarComp)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1.721293 3.185337 1.370230 2.574714 2.223162 2.392690 1.599962\n```\n:::\n\n```{.r .cell-code}\nsummary(ans3r)$varcomp %>% mutate(sdComp = sqrt(VarComp),\n                                  .after = VarComp)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                            VarComp   sdComp VarCompSE   Zratio Constraint\nName.Yield-Yield           2.962851 1.721293 1.4962000 1.980251   Positive\nCA.2011:Name.Yield-Yield  10.146369 3.185337 4.5073271 2.251083   Positive\nCA.2012:Name.Yield-Yield   1.877530 1.370230 1.8697568 1.004158   Positive\nCA.2013:Name.Yield-Yield   6.629152 2.574714 2.5028114 2.648682   Positive\nCA.2011:units.Yield-Yield  4.942450 2.223162 1.5245057 3.242001   Positive\nCA.2012:units.Yield-Yield  5.724963 2.392690 1.3123015 4.362536   Positive\nCA.2013:units.Yield-Yield  2.559880 1.599962 0.6399685 4.000010   Positive\n```\n:::\n:::\n\n::: {.cell hash='mixed_variance_cache/html/unnamed-chunk-20_9ee5be0e5eae996ad82d890d26543d41'}\n\n```{.r .cell-code}\n# Apparently order of your data matters, and can result in an error message of not fitting... can't find documentation as to why.\nDT <- DT_example[with(DT_example, order(Env)), ]\n\nans3e <- mmec(Yield~Env,\n              random = ~Name + vsc(dsc(Env), isc(Name)),\n              rcov = ~vsc(dsc(Env), isc(units)),\n              data = DT, # DT_example here will result in failure...\n              verbose = FALSE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nVersion out of date. Please update sommer to the newest version using:\ninstall.packages('sommer') in a new session\n Use the 'dateWarning' argument to disable the warning message.\n```\n:::\n\n```{.r .cell-code}\nsummary(ans3e)$varcomp\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                            VarComp VarCompSE   Zratio Constraint\nName:isc:isc               2.969457 1.3199316 2.249705   Positive\nEnv:Name:CA.2011:CA.2011  10.113270 4.2317594 2.389850   Positive\nEnv:Name:CA.2012:CA.2012   1.874589 1.3918727 1.346810   Positive\nEnv:Name:CA.2013:CA.2013   6.625506 2.3850257 2.777960   Positive\nEnv:units:CA.2011:CA.2011  4.953675 1.3389505 3.699670   Positive\nEnv:units:CA.2012:CA.2012  5.725455 1.2010534 4.767027   Positive\nEnv:units:CA.2013:CA.2013  2.561167 0.5872852 4.361029   Positive\n```\n:::\n:::\n\n\n### nlme\n\n\n::: {.cell hash='mixed_variance_cache/html/unnamed-chunk-21_269f01c1a30cede778690895b7b7324f'}\n\n```{.r .cell-code}\n# lme example with heterogenous G and R\nlmod3 <- lme(Yield ~ Env,\n             random = list(Name = pdBlocked(list(\n               pdIdent(form = ~1), # Name\n               pdDiag(form = ~Env-1)))), # Name:Env\n             weights = varIdent(form = ~1 | Env),\n             method = \"REML\",\n             data = DT_example)\n\nsummary(lmod3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nLinear mixed-effects model fit by REML\n  Data: DT_example \n       AIC      BIC    logLik\n  946.7659 978.8059 -463.3829\n\nRandom effects:\n Composite Structure: Blocked\n\n Block 1: (Intercept)\n Formula: ~1 | Name\n        (Intercept)\nStdDev:    1.721021\n\n Block 2: EnvCA.2011, EnvCA.2012, EnvCA.2013\n Formula: ~Env - 1 | Name\n Structure: Diagonal\n        EnvCA.2011 EnvCA.2012 EnvCA.2013 Residual\nStdDev:   3.185572   1.370587   2.574817  2.39263\n\nVariance function:\n Structure: Different standard deviations per stratum\n Formula: ~1 | Env \n Parameter estimates:\n  CA.2012   CA.2013   CA.2011 \n1.0000000 0.6686978 0.9291778 \nFixed effects:  Yield ~ Env \n                Value Std.Error  DF   t-value p-value\n(Intercept) 16.507683 0.8268640 142 19.964204       0\nEnvCA.2012  -5.816899 0.8575800 142 -6.782923       0\nEnvCA.2013  -6.412440 0.9356534 142 -6.853436       0\n Correlation: \n           (Intr) ECA.2012\nEnvCA.2012 -0.861         \nEnvCA.2013 -0.799  0.768  \n\nStandardized Within-Group Residuals:\n        Min          Q1         Med          Q3         Max \n-2.07307332 -0.53566469 -0.05597277  0.46043655  4.19617802 \n\nNumber of Observations: 185\nNumber of Groups: 41 \n```\n:::\n\n```{.r .cell-code}\nVarCorr(lmod3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nName = pdIdent(1), pdDiag(Env - 1) \n            Variance  StdDev  \n(Intercept)  2.961912 1.721021\nEnvCA.2011  10.147871 3.185572\nEnvCA.2012   1.878509 1.370587\nEnvCA.2013   6.629680 2.574817\nResidual     5.724679 2.392630\n```\n:::\n\n```{.r .cell-code}\nsigma_hat <- summary(lmod3)$sigma # for some reason, defaults to CA.2012 for the \"reference\" sigma\nsigma_weights <- coef(lmod3$modelStruct$varStruct, unconstrained=FALSE) # extract the weights estimated for each Env\nc(CA.2012 = sigma_hat, sigma_hat*sigma_weights)^2 # Multiply reference sigma to weights for final sd estimates (square for variance)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n CA.2012  CA.2013  CA.2011 \n5.724679 2.559829 4.942524 \n```\n:::\n\n```{.r .cell-code}\nintervals(lmod3) # for the approximate confidence intervals\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nApproximate 95% confidence intervals\n\n Fixed effects:\n                lower      est.     upper\n(Intercept) 14.873129 16.507683 18.142237\nEnvCA.2012  -7.512173 -5.816899 -4.121626\nEnvCA.2013  -8.262050 -6.412440 -4.562831\n\n Random Effects:\n  Level: Name \n                   lower     est.    upper\nsd(1)          1.0650575 1.721021 2.780988\nsd(EnvCA.2011) 2.0264211 3.185572 5.007780\nsd(EnvCA.2012) 0.4935377 1.370587 3.806212\nsd(EnvCA.2013) 1.7766278 2.574817 3.731609\n\n Variance function:\n            lower      est.     upper\nCA.2013 0.4773923 0.6686978 0.9366651\nCA.2011 0.6366733 0.9291778 1.3560666\n\n Within-group standard error:\n   lower     est.    upper \n1.897397 2.392630 3.017122 \n```\n:::\n:::\n\n::: {.cell hash='mixed_variance_cache/html/unnamed-chunk-22_79f92199fcad8ef0973cba1a2c9e185c'}\n\n```{.r .cell-code}\n# picked A01143-3C because it is present in all 3 environments\ngetVarCov(lmod3, type = \"random.effects\") # G\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRandom effects variance covariance matrix\n            (Intercept) EnvCA.2011 EnvCA.2012 EnvCA.2013\n(Intercept)      2.9619      0.000     0.0000     0.0000\nEnvCA.2011       0.0000     10.148     0.0000     0.0000\nEnvCA.2012       0.0000      0.000     1.8785     0.0000\nEnvCA.2013       0.0000      0.000     0.0000     6.6297\n  Standard Deviations: 1.721 3.1856 1.3706 2.5748 \n```\n:::\n\n```{.r .cell-code}\ngetVarCov(lmod3, individuals = \"A01143-3C\", type = \"conditional\") # R \n```\n\n::: {.cell-output .cell-output-stdout}\n```\nName A01143-3C \nConditional variance covariance matrix\n       1      2      3      4      5      6\n1 5.7247 0.0000 0.0000 0.0000 0.0000 0.0000\n2 0.0000 5.7247 0.0000 0.0000 0.0000 0.0000\n3 0.0000 0.0000 2.5598 0.0000 0.0000 0.0000\n4 0.0000 0.0000 0.0000 4.9425 0.0000 0.0000\n5 0.0000 0.0000 0.0000 0.0000 4.9425 0.0000\n6 0.0000 0.0000 0.0000 0.0000 0.0000 2.5598\n  Standard Deviations: 2.3926 2.3926 1.5999 2.2232 2.2232 1.5999 \n```\n:::\n\n```{.r .cell-code}\ngetVarCov(lmod3, individuals = \"A01143-3C\", type = \"marginal\") # ZGZ + R\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nName A01143-3C \nMarginal variance covariance matrix\n        1       2       3       4       5       6\n1 10.5650  4.8404  2.9619  2.9619  2.9619  2.9619\n2  4.8404 10.5650  2.9619  2.9619  2.9619  2.9619\n3  2.9619  2.9619 12.1510  2.9619  2.9619  9.5916\n4  2.9619  2.9619  2.9619 18.0520 13.1100  2.9619\n5  2.9619  2.9619  2.9619 13.1100 18.0520  2.9619\n6  2.9619  2.9619  9.5916  2.9619  2.9619 12.1510\n  Standard Deviations: 3.2504 3.2504 3.4859 4.2488 4.2488 3.4859 \n```\n:::\n:::\n\n\n### glmmTMB\n\n\n::: {.cell hash='mixed_variance_cache/html/unnamed-chunk-23_ea7336d8a41f34ded15c7a71637ff8e4'}\n\n```{.r .cell-code}\n# glmmTMB workaround for heterogenous R, need to code individual units as factor\nDT_TMB_example <- DT_example %>% mutate(units = as.factor(1:n()))\n\n# gives \"false convergence warning\": https://cran.r-project.org/web/packages/glmmTMB/vignettes/troubleshooting.html\n# tough to diagnose\ntmod3 <- glmmTMB(Yield ~ Env + (1|Name) + diag(Env + 0 | Name) + diag(Env + 0 | units), \n                 dispformula = ~0,\n                 REML = TRUE,\n                 data = DT_TMB_example)\n\n# update the optimizer method\ntmod3_bfgs <- update(tmod3, control = glmmTMBControl(optimizer = optim,\n                                                     optArgs = list(method=\"BFGS\")))\n\n# extract variance components\ntmod3_bfgs %>% tidy(effects = \"ran_pars\") %>% \n  filter(startsWith(term, \"sd\")) %>% \n  separate(term, into = c(\"term\", \"partition\"), sep = \"__\") %>% \n  mutate(var_est = estimate^2) %>% \n  dplyr::select(group, partition, var_est)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 7 × 3\n  group  partition   var_est\n  <chr>  <chr>         <dbl>\n1 Name   (Intercept)    2.96\n2 Name.1 EnvCA.2011    10.1 \n3 Name.1 EnvCA.2012     1.88\n4 Name.1 EnvCA.2013     6.63\n5 units  EnvCA.2011     4.94\n6 units  EnvCA.2012     5.72\n7 units  EnvCA.2013     2.56\n```\n:::\n:::\n\n\n### SAS\n\n\n::: {.cell hash='mixed_variance_cache/html/unnamed-chunk-24_614f5039a4d45e3a1e5522a9827125af'}\n\n```{.sas .cell-code}\nproc mixed data=dt;\nclass env name;\nmodel yield = env;\nrandom name;\nrandom name*env / group = env;\nrepeated / group = env;\nrun;\n```\n:::\n\n\n\n| Cov      | Parm | Group    | Estimate |\n|----------+------+----------+----------|\n| name     |      |          |   3.0647 |\n| env*name | env  | \"CA.2011 |  10.0346 |\n| env*name | env  | \"CA.2012 |   1.8875 |\n| env*name | env  | \"CA.2013 |   6.5388 |\n| Residual | env  | \"CA.2011 |   4.9424 |\n| Residual | env  | \"CA.2012 |   5.7143 |\n| Residual | env  | \"CA.2013 |   2.5599 |\n\nTable: SAS output for above code\n\n## Unstructured G, Heterogenous R {.tabset}\n\n<figure>\n<img src=\"img/un_G_hetero_R.png\"></img>\n<figcaption></figcaption>\n</figure>\n\n### sommer\n\n\n::: {.cell hash='mixed_variance_cache/html/unnamed-chunk-25_ff219a1db4098e64a482e17905764f09'}\n\n```{.r .cell-code}\nans4r <- mmer(Yield~Env,\n              random=~ vsr(usr(Env), Name), # we drop name from the model just for illustration (too many variables)\n              rcov=~vsr(dsr(Env),units),\n              data=DT_example, verbose = FALSE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nVersion out of date. Please update sommer to the newest version using:\ninstall.packages('sommer') in a new session\n Use the 'dateWarning' argument to disable the warning message.\n```\n:::\n\n```{.r .cell-code}\nsummary(ans4r)$varcomp\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                                    VarComp VarCompSE    Zratio Constraint\nCA.2011:Name.Yield-Yield         15.6650010 5.4206906 2.8898534   Positive\nCA.2012:CA.2011:Name.Yield-Yield  6.1101600 2.4850649 2.4587527   Unconstr\nCA.2012:Name.Yield-Yield          4.5296090 1.8208107 2.4876881   Positive\nCA.2013:CA.2011:Name.Yield-Yield  6.3844808 3.0658977 2.0824181   Unconstr\nCA.2013:CA.2012:Name.Yield-Yield  0.3929997 1.5233985 0.2579757   Unconstr\nCA.2013:Name.Yield-Yield          8.5972750 2.4837814 3.4613654   Positive\nCA.2011:units.Yield-Yield         4.9698460 1.5322540 3.2434870   Positive\nCA.2012:units.Yield-Yield         5.6729333 1.3007862 4.3611574   Positive\nCA.2013:units.Yield-Yield         2.5570940 0.6392821 3.9999462   Positive\n```\n:::\n:::\n\n::: {.cell hash='mixed_variance_cache/html/unnamed-chunk-26_3b9dea083a5c913fc9b06507d092b6e0'}\n\n```{.r .cell-code}\n# Display the Variance components as a matrix\nG_vec <- summary(ans4r)$varcomp %>% slice(1:6) %>% pull(VarComp)\nG <- Matrix(0,\n            nrow = 3,\n            ncol = 3)\nG[upper.tri(G, diag = TRUE)] <- G_vec\ncolnames(G) <- c(\"CA.2011\", \"CA.2012\", \"CA.2013\")\nrownames(G) <- c(\"CA.2011\", \"CA.2012\", \"CA.2013\")\nG\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n3 x 3 Matrix of class \"dtrMatrix\"\n           CA.2011    CA.2012    CA.2013\nCA.2011 15.6650010  6.1101600  6.3844808\nCA.2012          .  4.5296090  0.3929997\nCA.2013          .          .  8.5972750\n```\n:::\n:::\n\n\n### nlme\n\n\n::: {.cell hash='mixed_variance_cache/html/unnamed-chunk-27_0ebbc99d109c02e84c7d09bcf103baa7'}\n\n```{.r .cell-code}\n# lme version. Note we dropped \"Name\" from the model here because otherwise the std error of the variance estimates were HUGE. checked with interval(lmod4)\nlmod4 <- lme(Yield ~ Env,\n             random = list(Name = pdSymm(form = ~Env-1)), # Name:Env\n             weights = varIdent(form = ~1 | Env),\n             method = \"REML\",\n             data = DT_example)\ngetVarCov(lmod4) # G, now that we specify the same likelihood, the answers are the same\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRandom effects variance covariance matrix\n           EnvCA.2011 EnvCA.2012 EnvCA.2013\nEnvCA.2011    15.6640    6.11080    6.38400\nEnvCA.2012     6.1108    4.53100    0.39141\nEnvCA.2013     6.3840    0.39141    8.59800\n  Standard Deviations: 3.9578 2.1286 2.9322 \n```\n:::\n\n```{.r .cell-code}\ngetVarCov(lmod4, individual = \"A01143-3C\",type = \"conditional\") # R\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nName A01143-3C \nConditional variance covariance matrix\n       1      2     3    4    5     6\n1 5.6722 0.0000 0.000 0.00 0.00 0.000\n2 0.0000 5.6722 0.000 0.00 0.00 0.000\n3 0.0000 0.0000 2.557 0.00 0.00 0.000\n4 0.0000 0.0000 0.000 4.97 0.00 0.000\n5 0.0000 0.0000 0.000 0.00 4.97 0.000\n6 0.0000 0.0000 0.000 0.00 0.00 2.557\n  Standard Deviations: 2.3816 2.3816 1.5991 2.2294 2.2294 1.5991 \n```\n:::\n\n```{.r .cell-code}\n# summary(lmod4)\n```\n:::\n\n::: {.cell hash='mixed_variance_cache/html/unnamed-chunk-28_688162837da155e72467d1e64ce1051b'}\n\n```{.r .cell-code}\n# manual way of extracting the weights and multiplying by sigma for the residual variance components.\n# lmod4$modelStruct$varStruct # The variance structure of the residuals is in this object\nvw <- 1 / varWeights(lmod4$modelStruct$varStruct) # accessor function gives weights, which is inverse of sigma multiplier\n(vw[!duplicated(vw)] * lmod4$sigma)^2 # deduplicate, then multiply by sigma for variance\n```\n:::\n\n\n### glmmTMB\n\n\n::: {.cell hash='mixed_variance_cache/html/unnamed-chunk-29_0e0034cd820755ee49513af359cbc9e0'}\n\n```{.r .cell-code}\n## glmmTMB\ntmod4 <- glmmTMB(Yield ~ Env + us(Env + 0 | Name) + diag(Env + 0 | units), # drop name for estimability...\n                 dispformula = ~0,\n                 REML = TRUE,\n                 data=DT_TMB_example)\nsummary(tmod4)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n Family: gaussian  ( identity )\nFormula:          Yield ~ Env + us(Env + 0 | Name) + diag(Env + 0 | units)\nDispersion:             ~0\nData: DT_TMB_example\n\n     AIC      BIC   logLik deviance df.resid \n   942.9    981.5   -459.5    918.9      176 \n\nRandom effects:\n\nConditional model:\n Groups Name       Variance Std.Dev. Corr      \n Name   EnvCA.2011 15.665   3.958              \n        EnvCA.2012  4.531   2.129    0.73      \n        EnvCA.2013  8.598   2.932    0.55 0.06 \n units  EnvCA.2011  4.970   2.229              \n        EnvCA.2012  5.672   2.382    0.00      \n        EnvCA.2013  2.557   1.599    0.00 0.00 \nNumber of obs: 185, groups:  Name, 41; units, 185\n\nConditional model:\n            Estimate Std. Error z value Pr(>|z|)    \n(Intercept)  16.3313     0.8174  19.980  < 2e-16 ***\nEnvCA.2012   -5.6959     0.7444  -7.652 1.98e-14 ***\nEnvCA.2013   -6.2711     0.8282  -7.572 3.67e-14 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n```\n:::\n\n```{.r .cell-code}\n# tmb_sd <- vcov(tmod4,full=TRUE) %>% diag() %>% `[`(4:12) %>% sqrt()\n# tmb_logsd <- tmod$sdr$par.fixed[2:5]\n# tmb_logsd <- tmb_logsd[c(1, 2, 3, 1, 2, 3, 4, 4, 4)]\n# tmb_sd*2*exp(2*tmb_logsd)\n# \n# sqrt(2*exp(tmod4$sdr$par.fixed * 2))\n# confint(tmod4, component = \"all\", parm = c(1, 2, 3, 4, 5))\n# glmmTMB:::confint.glmmTMB(tmod4,parm=\"theta_\")\n```\n:::\n\n\n\n## Multivariate, Homogenous variance models {.tabset}\n\n### sommer\n\n\n::: {.cell hash='mixed_variance_cache/html/unnamed-chunk-30_a5e2bfa3a68f835cd37939bc0d4bd369'}\n\n```{.r .cell-code}\nans5r <- mmer(cbind(Yield, Weight) ~ Env,\n              random= ~ vsr(Name, Gtc=unsm(2)),\n              rcov= ~ vsr(units, Gtc=diag(2)),\n              data=DT_example, verbose = FALSE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nVersion out of date. Please update sommer to the newest version using:\ninstall.packages('sommer') in a new session\n Use the 'dateWarning' argument to disable the warning message.\n```\n:::\n\n```{.r .cell-code}\nsummary(ans5r)$varcomp\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                        VarComp  VarCompSE   Zratio Constraint\nu:Name.Yield-Yield    5.0023799 1.48723681 3.363540   Positive\nu:Name.Yield-Weight   1.4364292 0.33713194 4.260733   Unconstr\nu:Name.Weight-Weight  0.2813217 0.08054357 3.492789   Positive\nu:units.Yield-Yield   7.6133497 0.88506057 8.602066   Positive\nu:units.Weight-Weight 0.3586951 0.04189443 8.561882   Positive\n```\n:::\n:::\n\n\n\n# Additional Resources\n\nRight now these resources are relatively unorganized, but contain a wealth of information. It seems like the variance modeling is scattered throughout the packages in R.\n\n- [Factor Specific Variances](https://rpubs.com/bbolker/factorvar) - gives example of \"G\" side and \"R\" side for heterogeneous variance modeling. There is a correct way and incorrect way to specify this. Both are heterogeneous variance component style matrices.\n- [Covariance Structures in R](https://rpubs.com/samuelkn/CovarianceStructuresInR) - messier overview of \"G\" and \"R\" side matrix structuring, however breaks down the examples quite well in terms of how to actually specify the model that we'd like.\n- [Overview of Major Computer Package for Genomic Prediction of Complex Traits](https://link.springer.com/protocol/10.1007/978-1-0716-2205-6_6) - author of the sommer package, excellet overview of the ecosystem and a worked example of reml estimation with variance structures.\n- [MMFAIR Heterogenous Error Variance](https://schmidtpaul.github.io/MMFAIR/heterogeneous_error_variance.html) - a nice rmarkdown description of a lot of different error structures, with code in sommer, nlme, lme4, SAS\n\nFor more of a philosophical take on confirmatory analyses:\n\n* [Random effects structure for confirmatory hypothesis testing: Keep it maximal](https://www-sciencedirect-com.ezproxy.library.wisc.edu/science/article/pii/S0749596X12001180?via%3Dihub#b0210) - argues that for confirmatory analyses, should use the most random effects possible that make sense for the design.\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../site_libs/kePrint-0.0.1/kePrint.js\"></script>\n<link href=\"../site_libs/lightable-0.0.1/lightable.css\" rel=\"stylesheet\" />\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}